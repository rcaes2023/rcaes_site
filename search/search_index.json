{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Research Computing","text":"<p>Fall 2023 | 16:107:606 Special Topics in Atmospheric Sciences Research Computing in Atmospheric and Environmental Sciences Rutgers University, Department of Environmental Sciences</p> <p></p>"},{"location":"Assignment_0/","title":"Create your Accounts on Amarel and GitHub","text":""},{"location":"Assignment_0/#amarel-account","title":"Amarel Account","text":"<p>https://oarc.rutgers.edu/amarel-cluster-access-request/</p>"},{"location":"Assignment_0/#github-account","title":"GitHub Account","text":"<p>https://github.com  Student Account: https://education.github.com/benefits?type=student</p>"},{"location":"Assignment_3/","title":"Assignment 3 - Numpy and Matplotlib","text":"<p>First import numpy and matplotlib</p> In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! <pre>import pandas as pd\n\ndf = pd.read_csv('Millbrook_NY_daily_weather.csv', parse_dates=['LST_DATE'])\ndf = df.set_index('LST_DATE')\n\n#########################################################\n#### BELOW ARE THE VARIABLES YOU SHOULD USE IN THE PLOTS!\n#### (numpy arrays) \n#### NO PANDAS ALLOWED!\n#########################################################\n\nt_daily_min = df.T_DAILY_MIN.values\nt_daily_max = df.T_DAILY_MAX.values\nt_daily_mean = df.T_DAILY_MEAN.values\np_daily_calc = df.P_DAILY_CALC.values\nsoil_moisture_5 = df.SOIL_MOISTURE_5_DAILY.values\nsoil_moisture_10 = df.SOIL_MOISTURE_10_DAILY.values\nsoil_moisture_20 = df.SOIL_MOISTURE_20_DAILY.values\nsoil_moisture_50 = df.SOIL_MOISTURE_50_DAILY.values\nsoil_moisture_100 = df.SOIL_MOISTURE_100_DAILY.values\ndate = df.index.values\n</pre> import pandas as pd  df = pd.read_csv('Millbrook_NY_daily_weather.csv', parse_dates=['LST_DATE']) df = df.set_index('LST_DATE')  ######################################################### #### BELOW ARE THE VARIABLES YOU SHOULD USE IN THE PLOTS! #### (numpy arrays)  #### NO PANDAS ALLOWED! #########################################################  t_daily_min = df.T_DAILY_MIN.values t_daily_max = df.T_DAILY_MAX.values t_daily_mean = df.T_DAILY_MEAN.values p_daily_calc = df.P_DAILY_CALC.values soil_moisture_5 = df.SOIL_MOISTURE_5_DAILY.values soil_moisture_10 = df.SOIL_MOISTURE_10_DAILY.values soil_moisture_20 = df.SOIL_MOISTURE_20_DAILY.values soil_moisture_50 = df.SOIL_MOISTURE_50_DAILY.values soil_moisture_100 = df.SOIL_MOISTURE_100_DAILY.values date = df.index.values In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[7]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"Assignment_3/#assignment-3-numpy-and-matplotlib","title":"Assignment 3 - Numpy and Matplotlib\u00b6","text":""},{"location":"Assignment_3/#1-creating-and-manipulating-arrays","title":"1 Creating and Manipulating Arrays\u00b6","text":""},{"location":"Assignment_3/#11-create-two-2d-arrays-xx-and-yy-representing-coordinates-x-y-on-the-cartesian-plan","title":"1.1. Create two 2D arrays (xx and yy) representing coordinates x, y on the cartesian plan\u00b6","text":"<p>Both should cover the range (-2, 2) and have 100 points in each direction</p>"},{"location":"Assignment_3/#12-visualize-each-2d-array-using-pcolormesh","title":"1.2. Visualize each 2D array using <code>pcolormesh</code>\u00b6","text":"<p>Use the correct coordiantes for the x and y axes. Provide axis labels for all of your plots in this assignment.</p>"},{"location":"Assignment_3/#13-from-your-cartesian-coordinates-create-polar-coordinates-r-and-varphi","title":"1.3 From your cartesian coordinates, create polar coordinates $r$ and $\\varphi$\u00b6","text":"<p>Refer to the wikipedia page for the conversion formula. You will need to use numpy's <code>arctan2</code> function. Read its documentation.</p>"},{"location":"Assignment_3/#14-visualize-r-and-varphi-as-functions-of-x-and-y","title":"1.4. Visualize $r$ and $\\varphi$ as functions of $x$ and $y$\u00b6","text":""},{"location":"Assignment_3/#15-define-the-function-f-cos24r-sin24varphi-and-plot-it-as-a-function-of-x-and-y","title":"1.5 Define the function $f = \\cos^2(4r) + \\sin^2(4\\varphi)$ and Plot it as a function of $x$ and $y$\u00b6","text":""},{"location":"Assignment_3/#16-plot-the-mean-of-f-with-respect-to-the-x-axis","title":"1.6 Plot the mean of f with respect to the x axis\u00b6","text":"<p>as a function of y</p>"},{"location":"Assignment_3/#17-plot-the-mean-of-f-with-respect-to-the-y-axis","title":"1.7 Plot the mean of f with respect to the y axis\u00b6","text":"<p>as a function of x</p>"},{"location":"Assignment_3/#part-ii-making-plots-with-matplotlib-for-real-data","title":"Part II: Making plots with Matplotlib for real data\u00b6","text":"<p>In this problem, we will plot some daily weather data from a NOAA station in Millbrook, NY.</p> <p>The cell below uses pandas to load the data and populate a bunch of numpy arrays (<code>t_daily_min</code>, <code>t_daily_max</code>, etc.)</p>"},{"location":"Assignment_3/#21-use-numpy-to-calculate-mean-temperature-precipitation-and-soil-moisture-at-different-layers","title":"2.1 Use numpy to calculate mean temperature, precipitation and soil moisture at different layers.\u00b6","text":"<p>Write a loop to make the code short and efficient.</p>"},{"location":"Assignment_3/#22-use-the-numpy-arrays-to-try-to-re-create-the-plot-you-see-below","title":"2.2 Use the numpy arrays to try to re-create the plot you see below\u00b6","text":"<p>Hint: Try fill_between to plot range values</p>"},{"location":"Final_Project/","title":"Final Project","text":""},{"location":"Final_Project/#part-i-individual-project-20","title":"Part I: Individual Project (20%)","text":"<p>The goal of the final project is to assess your ability to combine and apply the skills you have learned in class in the context of a real-world research problem. Our class has mostly focused on tools for data analysis and visualization, so this must be the focus of your final project. Specifically, we seek to assess your ability to do the following tasks: \u2022   Discover and download real datasets in standard formats (e.g. CSV, netCDF) \u2022   Load the data into pandas or xarray, performing any necessary data cleanup (dealing with missing values, proper time encoding, etc.) along the way. \u2022   Perform realistic scientific calculation involving, for example tasks such as grouping, aggregating, and applying mathematical formulas. \u2022   Visualize your results in well-formatted plots.</p>"},{"location":"Final_Project/#part-ii-reproducing-another-students-project-10","title":"Part II: Reproducing Another Student\u2019s Project (10%)","text":"<p>The goal of the second part is to assess the reproducibility of the student\u2019s project, and whether the students can reproduce and collaborate with others on code development. Our class focuses on conducting open-source research that are transparent, accessible, reproducible and inclusive, so your final project should demonstrate your understanding and ability to perform open-source research. We seek to assess your ability to: \u2022   Clearly document your analysis to make it reproducible. \u2022   Reproduce the other student\u2019s final project. \u2022   Bonus points will be given if the students submit pull requests and issues for code development. </p>"},{"location":"Lecture_2_Core_Python/","title":"Lecture 2 Core Python Language","text":"In\u00a0[1]: Copied! <pre># comments are anything that comes after the \"#\" symbol\na = 1       # assign 1 to variable a\nb = \"hello\" # assign \"hello\" to variable b\n</pre> # comments are anything that comes after the \"#\" symbol a = 1       # assign 1 to variable a b = \"hello\" # assign \"hello\" to variable b <p>The following identifiers are used as reserved words, or keywords of the language, and cannot be used as ordinary identifiers. They must be spelled exactly as written here:</p> <pre><code>False      class      finally    is         return\nNone       continue   for        lambda     try\nTrue       def        from       nonlocal   while\nand        del        global     not        with\nas         elif       if         or         yield\nassert     else       import     pass\nbreak      except     in         raise</code></pre> <p>Additionally, the following a built in functions which are always available in your namespace once you open a python interpreter</p> <pre><code>abs() dict() help() min() setattr() all() dir() hex() next() slice() any()\ndivmod() id() object() sorted() ascii() enumerate() input() oct() staticmethod()\nbin() eval() int() open() str() bool() exec() isinstance() ord() sum() bytearray()\nfilter() issubclass() pow() super() bytes() float() iter() print() tuple()\ncallable() format() len() property() type() chr() frozenset() list() range()\nvars() classmethod() getattr() locals() repr() zip() compile() globals() map()\nreversed() __import__() complex() hasattr() max() round() delattr() hash()\nmemoryview() set()</code></pre> In\u00a0[2]: Copied! <pre># how to we see our variables?\nprint(a)\nprint(b)\nprint(a,b)\n</pre> # how to we see our variables? print(a) print(b) print(a,b) <pre>1\nhello\n1 hello\n</pre> <p>All variables are objects. Every object has a type (class). To find out what type your variables are</p> In\u00a0[5]: Copied! <pre># as a shortcut, iPython notebooks will automatically print whatever is on the last line\ntype(b)\n</pre> # as a shortcut, iPython notebooks will automatically print whatever is on the last line type(b) Out[5]: <pre>str</pre> In\u00a0[6]: Copied! <pre>type(a) is int\n</pre> type(a) is int Out[6]: <pre>True</pre> <p>Different objects attributes and methods, which can be accessed via the syntax <code>variable.method</code></p> <p>IPython will autocomplete if you press <code>&lt;tab&gt;</code> to show you the methods available.</p> In\u00a0[7]: Copied! <pre># this returns the method itself\nb.capitalize\n</pre> # this returns the method itself b.capitalize Out[7]: <pre>&lt;function str.capitalize()&gt;</pre> In\u00a0[8]: Copied! <pre># this calls the method\nb.capitalize()\n# there are lots of other methods\n</pre> # this calls the method b.capitalize() # there are lots of other methods Out[8]: <pre>'Hello'</pre> In\u00a0[9]: Copied! <pre># binary operations act differently on different types of objects\nc = 'World'\nprint(b + c)\nprint(a + 2)\nprint(a + b)\n</pre> # binary operations act differently on different types of objects c = 'World' print(b + c) print(a + 2) print(a + b) <pre>helloWorld\n3\n</pre> <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[9], line 5\n      3 print(b + c)\n      4 print(a + 2)\n----&gt; 5 print(a + b)\n\nTypeError: unsupported operand type(s) for +: 'int' and 'str'</pre> In\u00a0[10]: Copied! <pre># addition / subtraction\n1+1-5\n</pre> # addition / subtraction 1+1-5 Out[10]: <pre>-3</pre> In\u00a0[11]: Copied! <pre># multiplication\n5 * 10\n</pre> # multiplication 5 * 10 Out[11]: <pre>50</pre> In\u00a0[12]: Copied! <pre># division\n1/2\n</pre> # division 1/2 Out[12]: <pre>0.5</pre> In\u00a0[13]: Copied! <pre># that was automatically converted to a float\ntype(1/2)\n</pre> # that was automatically converted to a float type(1/2) Out[13]: <pre>float</pre> In\u00a0[13]: Copied! <pre># exponentiation\n2**4\n</pre> # exponentiation 2**4 Out[13]: <pre>16</pre> In\u00a0[14]: Copied! <pre># rounding\nround(9/10)\n</pre> # rounding round(9/10) Out[14]: <pre>1</pre> In\u00a0[15]: Copied! <pre># built in complex number support\n(1+2j) / (3-4j)\n</pre> # built in complex number support (1+2j) / (3-4j) Out[15]: <pre>(-0.2+0.4j)</pre> In\u00a0[15]: Copied! <pre># logic\nTrue and True\n</pre> # logic True and True Out[15]: <pre>True</pre> In\u00a0[16]: Copied! <pre>True and False\n</pre> True and False Out[16]: <pre>False</pre> In\u00a0[17]: Copied! <pre>True or True\n</pre> True or True Out[17]: <pre>True</pre> In\u00a0[18]: Copied! <pre>(not True) or (not False)\n</pre> (not True) or (not False) Out[18]: <pre>True</pre> In\u00a0[19]: Copied! <pre>x = 100\nif x &gt; 0:\n    print('Positive Number')\nelif x &lt; 0:\n    print('Negative Number')\nelse:\n    print ('Zero!')\n</pre> x = 100 if x &gt; 0:     print('Positive Number') elif x &lt; 0:     print('Negative Number') else:     print ('Zero!') <pre>Positive Number\n</pre> In\u00a0[20]: Copied! <pre># indentation is MANDATORY\n# blocks are closed by indentation level\nif x &gt; 0:\n    print('Positive Number')\n    if x &gt;= 100:\n        print('Huge number!')\n</pre> # indentation is MANDATORY # blocks are closed by indentation level if x &gt; 0:     print('Positive Number')     if x &gt;= 100:         print('Huge number!') <pre>Positive Number\nHuge number!\n</pre> In\u00a0[21]: Copied! <pre># make a loop \ncount = 0\nwhile count &lt; 10:\n    # bad way\n    # count = count + 1\n    # better way\n    count += 1\nprint(count)\n</pre> # make a loop  count = 0 while count &lt; 10:     # bad way     # count = count + 1     # better way     count += 1 print(count) <pre>10\n</pre> In\u00a0[22]: Copied! <pre># use range\nfor i in range(5):\n    print(i)\n</pre> # use range for i in range(5):     print(i) <pre>0\n1\n2\n3\n4\n</pre> <p>Important point: in python, we always count from 0!</p> In\u00a0[23]: Copied! <pre># what is range?\ntype(range)\n</pre> # what is range? type(range) Out[23]: <pre>type</pre> In\u00a0[24]: Copied! <pre>range?\n</pre> range? <pre>Init signature: range(self, /, *args, **kwargs)\nDocstring:     \nrange(stop) -&gt; range object\nrange(start, stop[, step]) -&gt; range object\n\nReturn an object that produces a sequence of integers from start (inclusive)\nto stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.\nstart defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.\nThese are exactly the valid indices for a list of 4 elements.\nWhen step is given, it specifies the increment (or decrement).\nType:           type\nSubclasses:     </pre> In\u00a0[25]: Copied! <pre># iterate over a list we make up\nfor pet in ['dog', 'cat', 'fish']:\n    print(pet, len(pet))\n</pre> # iterate over a list we make up for pet in ['dog', 'cat', 'fish']:     print(pet, len(pet)) <pre>dog 3\ncat 3\nfish 4\n</pre> <p>What is the thing in brackets? A list! Lists are one of the core python data structures.</p> In\u00a0[26]: Copied! <pre>l = ['dog', 'cat', 'fish']\ntype(l)\n</pre> l = ['dog', 'cat', 'fish'] type(l) Out[26]: <pre>list</pre> In\u00a0[27]: Copied! <pre># list have lots of methods\nl.sort()\nl\n</pre> # list have lots of methods l.sort() l Out[27]: <pre>['cat', 'dog', 'fish']</pre> In\u00a0[28]: Copied! <pre># we can convert a range to a list\nr = list(range(5))\nr\n</pre> # we can convert a range to a list r = list(range(5)) r Out[28]: <pre>[0, 1, 2, 3, 4]</pre> In\u00a0[29]: Copied! <pre>while r:\n    p = r.pop()\n    print('p:', p)\n    print('r:', r)\n</pre> while r:     p = r.pop()     print('p:', p)     print('r:', r) <pre>p: 4\nr: [0, 1, 2, 3]\np: 3\nr: [0, 1, 2]\np: 2\nr: [0, 1]\np: 1\nr: [0]\np: 0\nr: []\n</pre> <p>There are many different ways to interact with lists. Exploring them is part of the fun of python.</p> <p>list.append(x) Add an item to the end of the list. Equivalent to a[len(a):] = [x].</p> <p>list.extend(L) Extend the list by appending all the items in the given list. Equivalent to a[len(a):] = L.</p> <p>list.insert(i, x) Insert an item at a given position. The first argument is the index of the element before which to insert, so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x).</p> <p>list.remove(x) Remove the first item from the list whose value is x. It is an error if there is no such item.</p> <p>list.pop([i]) Remove the item at the given position in the list, and return it. If no index is specified, a.pop() removes and returns the last item in the list. (The square brackets around the i in the method signature denote that the parameter is optional, not that you should type square brackets at that position. You will see this notation frequently in the Python Library Reference.)</p> <p>list.clear() Remove all items from the list. Equivalent to del a[:].</p> <p>list.index(x) Return the index in the list of the first item whose value is x. It is an error if there is no such item.</p> <p>list.count(x) Return the number of times x appears in the list.</p> <p>list.sort() Sort the items of the list in place.</p> <p>list.reverse() Reverse the elements of the list in place.</p> <p>list.copy() Return a shallow copy of the list. Equivalent to a[:].</p> <p>Don't assume you know how list operations work!</p> In\u00a0[30]: Copied! <pre># \"add\" two lists\nx = list(range(5))\ny = list(range(10,15))\nz = x + y\nz\n</pre> # \"add\" two lists x = list(range(5)) y = list(range(10,15)) z = x + y z Out[30]: <pre>[0, 1, 2, 3, 4, 10, 11, 12, 13, 14]</pre> In\u00a0[31]: Copied! <pre># access items from a list\nprint('first', z[0])\nprint('last', z[-1])\nprint('first 3', z[:3])\nprint('last 3', z[-3:])\nprint('middle, skipping every other item', z[5:10:2])\n</pre> # access items from a list print('first', z[0]) print('last', z[-1]) print('first 3', z[:3]) print('last 3', z[-3:]) print('middle, skipping every other item', z[5:10:2]) <pre>first 0\nlast 14\nfirst 3 [0, 1, 2]\nlast 3 [12, 13, 14]\nmiddle, skipping every other item [10, 12, 14]\n</pre> <p>MEMORIZE THIS SYNTAX! It is central to so much of python and often proves confusing for users coming from other languages.</p> <p>In terms of set notation, python indexing is left inclusive, right exclusive. If you remember this, you will never go wrong.</p> In\u00a0[32]: Copied! <pre># that means we get an error from the following\nN = len(z)\nz[N]\n</pre> # that means we get an error from the following N = len(z) z[N] <pre>\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[32], line 3\n      1 # that means we get an error from the following\n      2 N = len(z)\n----&gt; 3 z[N]\n\nIndexError: list index out of range</pre> In\u00a0[33]: Copied! <pre># this index notation also applies to strings\nname = 'Xiaomeng Jin'\nprint(name[:4])\n</pre> # this index notation also applies to strings name = 'Xiaomeng Jin' print(name[:4]) <pre>Xiao\n</pre> In\u00a0[34]: Copied! <pre>print(name[:-4])\n</pre> print(name[:-4]) <pre>Xiaomeng\n</pre> In\u00a0[36]: Copied! <pre>print(name[-3:])\n</pre> print(name[-3:]) <pre>Jin\n</pre> In\u00a0[37]: Copied! <pre># you can also test for the presence of items in a list\n5 in z\n</pre> # you can also test for the presence of items in a list 5 in z Out[37]: <pre>False</pre> <p>Lists are not meant for math! They don't have a datatype.</p> In\u00a0[38]: Copied! <pre>z[4] = 'fish'\nz\n</pre> z[4] = 'fish' z Out[38]: <pre>[0, 1, 2, 3, 'fish', 10, 11, 12, 13, 14]</pre> <p>Python is full of tricks for iterating and working with lists</p> In\u00a0[42]: Copied! <pre># a cool python trick: list comprehension\nsquares = [n**2 for n in range(5)]\nsquares\n</pre> # a cool python trick: list comprehension squares = [n**2 for n in range(5)] squares Out[42]: <pre>[0, 1, 4, 9, 16]</pre> In\u00a0[39]: Copied! <pre># iterate over two lists together uzing zip\nfor item1, item2 in zip(x,y):\n    print('first:', item1, 'second:', item2)\n</pre> # iterate over two lists together uzing zip for item1, item2 in zip(x,y):     print('first:', item1, 'second:', item2) <pre>first: 0 second: 10\nfirst: 1 second: 11\nfirst: 2 second: 12\nfirst: 3 second: 13\nfirst: 4 second: 14\n</pre> In\u00a0[43]: Copied! <pre># tuples are created with parentheses, or just commas\na = ('Jin', 32, True)\nb = 'Wang', 25, False\ntype(b)\n</pre> # tuples are created with parentheses, or just commas a = ('Jin', 32, True) b = 'Wang', 25, False type(b) Out[43]: <pre>tuple</pre> In\u00a0[44]: Copied! <pre>b\n</pre> b Out[44]: <pre>('Wang', 25, False)</pre> In\u00a0[45]: Copied! <pre># can be indexed like arrays\nprint(a[1]) # not the first element!\n</pre> # can be indexed like arrays print(a[1]) # not the first element! <pre>32\n</pre> In\u00a0[46]: Copied! <pre># and they can be unpacked\nname, age, status = a\n</pre> # and they can be unpacked name, age, status = a In\u00a0[47]: Copied! <pre># different ways to create dictionaries : Curly brackets or dict\nd = {'name': 'Jin', 'age': 32}\ne = dict(name='Wang', age=25)\ne\n</pre> # different ways to create dictionaries : Curly brackets or dict d = {'name': 'Jin', 'age': 32} e = dict(name='Wang', age=25) e Out[47]: <pre>{'name': 'Wang', 'age': 25}</pre> In\u00a0[48]: Copied! <pre># access a value\nd['name']\n</pre> # access a value d['name'] Out[48]: <pre>'Jin'</pre> <p>Square brackets <code>[...]</code> are python for \"get item\" in many different contexts.</p> In\u00a0[49]: Copied! <pre># test for the presence of a key\nprint('age' in d)\nprint('height' in e)\n</pre> # test for the presence of a key print('age' in d) print('height' in e) <pre>True\nFalse\n</pre> In\u00a0[50]: Copied! <pre># try to access a non-existant key\nd['height']\n</pre> # try to access a non-existant key d['height'] <pre>\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nCell In[50], line 2\n      1 # try to access a non-existant key\n----&gt; 2 d['height']\n\nKeyError: 'height'</pre> In\u00a0[51]: Copied! <pre># add a new key\nd['height'] = (5,3) # a tuple\nd\n</pre> # add a new key d['height'] = (5,3) # a tuple d Out[51]: <pre>{'name': 'Jin', 'age': 32, 'height': (5, 3)}</pre> In\u00a0[52]: Copied! <pre># keys don't have to be strings\nd[99] = 'nighty nine'\nd\n</pre> # keys don't have to be strings d[99] = 'nighty nine' d Out[52]: <pre>{'name': 'Jin', 'age': 32, 'height': (5, 3), 99: 'nighty nine'}</pre> In\u00a0[53]: Copied! <pre># iterate over keys\nfor k in d:\n    print(k, d[k])\n</pre> # iterate over keys for k in d:     print(k, d[k]) <pre>name Jin\nage 32\nheight (5, 3)\n99 nighty nine\n</pre> In\u00a0[54]: Copied! <pre># better way\n### python 2\n### for key, val in d.iteritems()\nfor key, val in d.items():\n    print(key, val)\n</pre> # better way ### python 2 ### for key, val in d.iteritems() for key, val in d.items():     print(key, val) <pre>name Jin\nage 32\nheight (5, 3)\n99 nighty nine\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"Lecture_2_Core_Python/#lecture-2-core-python-language","title":"Lecture 2 Core Python Language\u00b6","text":"<p>Mostly copied from the official python tutorial</p>"},{"location":"Lecture_2_Core_Python/#invoking-python","title":"Invoking Python\u00b6","text":"<p>There are three main ways to use python.</p> <ol> <li>By running a python file, e.g. <code>python myscript.py</code></li> <li>Through an interactive console (python interpreter or ipython shell)</li> <li>In an interactive iPython notebook</li> </ol> <p>We will be using the iPython notebook.</p>"},{"location":"Lecture_2_Core_Python/#basic-variables-numbers-and-string","title":"Basic Variables: Numbers and String\u00b6","text":""},{"location":"Lecture_2_Core_Python/#math","title":"Math\u00b6","text":"<p>Basic arithmetic and boolean logic is part of the core python library.</p>"},{"location":"Lecture_2_Core_Python/#conditionals","title":"Conditionals\u00b6","text":"<p>The first step to programming. Plus an intro to python syntax.</p>"},{"location":"Lecture_2_Core_Python/#more-flow-control","title":"More Flow Control\u00b6","text":""},{"location":"Lecture_2_Core_Python/#lists","title":"Lists\u00b6","text":""},{"location":"Lecture_2_Core_Python/#other-data-structures","title":"Other Data Structures\u00b6","text":"<p>We are almost there. We have the building blocks we need to do basic programming. But python has some other data structures we need to learn about.</p>"},{"location":"Lecture_2_Core_Python/#tuples","title":"Tuples\u00b6","text":"<p>Tuples are similar to lists, but they are immutable\u2014they can't be extended or modified. What is the point of this? Generally speaking: to pack together inhomogeneous data. Tuples can then be unpacked and distributed by other parts of your code.</p> <p>Tuples may seem confusing at first, but with time you will come to appreciate them. Tuples are great to use if you want the data in your collection to be read-only, never to change, and always remain the same and constant.</p>"},{"location":"Lecture_2_Core_Python/#dictionaries","title":"Dictionaries\u00b6","text":"<p>This is an extremely useful data structure. It maps keys to values.</p> <p>Dictionaries are unordered!</p> <p>Tuples can be used as dictionary keys (specifically, tuples that contain immutable values like strings, numbers, and other tuples). Lists can never be used as dictionary keys, because lists are mutable.</p>"},{"location":"Lecture_2_install_python_amarel/","title":"Install Conda and Python","text":"<ul> <li>Connect to Amarel Open OnDemand </li> <li>Click Clusters </li> <li>Choose Amarel Cluster Shell Access </li> <li>Enter your password </li> <li>In the terminal, do the following commands (one line each time). If you're using Windows, type 'Ctrl+c' to copy and 'Ctrl+Shift+v' to paste command. </li> </ul> <pre><code>$ module use /projects/community/modulefiles\n$ module load anaconda/2020.07-gc563\n$ cd\n$ source .bashrc\n$ mkdir -p .conda/pkgs/cache .conda/envs \n</code></pre> <ul> <li>Test if conda is successfully installed: </li> </ul> <pre><code>$ which conda\n</code></pre> <ul> <li>Install a conda environment called 'rcaes_env': </li> </ul> <pre><code>$ conda create -n rcaes_env\n</code></pre> <ul> <li>Enter Y to proceed. Wait until you see the following. It may take a while. </li> </ul> <pre><code>#                                                                                                                                                               \n# To activate this environment, use                                                                                                                             \n#                                                                                                                                                               \n#     $ conda activate rcaes_env                                                                                                                              \n#                                                                                                                                                               \n# To deactivate an active environment, use                                                                                                                      \n#                                                                                                                                                               \n#     $ conda deactivate    \n</code></pre> <ul> <li>Now let's activate the environment:</li> </ul> <pre><code>$ conda activate rcaes_env \n</code></pre> <ul> <li>First, let's install essential packages</li> </ul> <pre><code>conda install -c conda-forge python=3.9 jupyter jupyterlab notebook numpy scipy ipython\n</code></pre> <ul> <li>Next, let's install github CLI, a command-line interface to GitHub for use in your terminal or your scripts</li> </ul> <pre><code>conda install -c conda-forge gh\n</code></pre> <ul> <li> <p>Next, go back to Amarel Open OnDemand. This time, we will launch a personal jupyter. Click on 'Interactive Apps', choose 'Personal Jupyter'. </p> </li> <li> <p>Settings for Personal Jupyter: </p> </li> </ul> <pre><code>    Number of hours: 10 \n    Number of cores: 1 \n    Gigabytes of memory: 10 \n    Partition: main\n    Leave Reservation and slurm feature blank \n    conda path: /projects/community/anaconda/2020.07/gc563 \n    conda environment: rcaes_env\n</code></pre> <ul> <li>To install Conda on your laptop, I recommend using Miniconda</li> </ul>"},{"location":"Lecture_2_intro_to_unix/","title":"Intro to Unix","text":"<p>The notes below are modified from the excellent Unix Shell tutorial  that is freely available on the Software Carpentry website. I highly recommend checking out the full version for further reading. The material is being used here under the terms of the Creative Commons Attribution license.</p>"},{"location":"Lecture_2_intro_to_unix/#what-is-unix-shell","title":"What is Unix shell?","text":"<p>The Unix shell is both a command-line interface and a scripting language. With the shell, it is possible to invoke complicated programs like climate modeling or a simple command that create an empty directory.  The most popular Unix Shell is Bash. </p>"},{"location":"Lecture_2_intro_to_unix/#navigating-files-and-directories","title":"Navigating Files and Directories","text":"<p>Several commands are frequently used to create, inspect, rename, and delete files and directories.</p> <p>To get started, open a terminal using the OpenOnDemand Clusters: Amarel Cluster Shell Access. After entering your password, you will see the welcome message. </p> <pre><code>(base) [xj103@amarel2 ~]$ \n</code></pre> <p>The dollar sign is a prompt, which shows us that the shell is waiting for input.</p> <p><code>xj103</code> is our username and <code>amarel2</code> is the hostname. The username will be your NetID. The hostname indicates the node you're at. Here we are using login nodes (amarel1, amarel2, etc.). Cluster login nodes provide a shared environment where users can transfer data, build software, and prepare their calculations.  Running applications on a shared login node or doing things that consume significant compute, memory, or network resources can unfairly impact other users.  Please do not do that. Do not run your research applications on the login node.  If you log into the terminal via a compute nodes, you will see the hostname as hal0001, hal0002 etc., which are nodes assigned to you for computation. </p> <p>From now on, we will just use a <code>$</code> to indicate the prompt.</p> <p>To find out your username in general, you can use the command</p> <pre><code>$ whoami\nxj103\n</code></pre> <p>and to find out your hostname</p> <pre><code>$ hostname\namarel2.amarel.rutgers.edu\n</code></pre> <p>Next, let's find out where we are by running a command called <code>pwd</code> (which stands for \"print working directory\"). At any moment, our current working directory is our current default directory, i.e., the directory that the computer assumes we want to run commands in unless we explicitly specify something else. Here, the computer's response is <code>/home/xj103</code>, which is the home directory of the user named <code>xj103</code>.</p> <pre><code>$ pwd\n</code></pre> <pre><code>/home/xj103\n</code></pre> <p>To understand what a \"home directory\" is, let's have a look at how the file system as a whole is organized.  For the sake of this example, we'll be illustrating the filesystem on Amarel.  </p> <pre><code>$ cd /\n</code></pre> <p>Now let's learn the command that will let us see the contents of our own filesystem.  We can see what's in our home directory by running <code>ls</code>, which stands for \"listing\":</p> <pre><code>$ ls\n</code></pre> <p>On a Unix computer, at the top is the root directory that holds everything else. We refer to it using a slash character <code>/</code> on its own; this is the leading slash in <code>/home/xj103</code>.</p> <p>Inside that directory are several other directories: <code>bin</code> (which is where some built-in programs are stored), <code>lib</code> (for the software \"libraries\" used by different programs), <code>home</code> (where users' personal directories are located), <code>projects</code> (where project data are stored), <code>etc</code> (system-wide configuration files), and so on.  </p> <p>Now let's go back to our home directory with ~ (tilde)</p> <pre><code>$ cd ~\n</code></pre> <p><code>ls</code> prints the names of the files and directories in the current directory in alphabetical order, arranged neatly into columns. We can make its output more comprehensible by using the flag <code>-F</code>, which tells <code>ls</code> to add a trailing <code>/</code> to the names of directories:</p> <pre><code>$ ls -F\n</code></pre> <p><code>ls</code> has lots of other options. To find out what they are, we can type:</p> <pre><code>$ man ls\n</code></pre> <p><code>man</code> is the Unix \"manual\" command: it prints a description of a command and its options, and (if you're lucky) provides a few examples of how to use it. To navigate through the <code>man</code> pages, you may use the up and down arrow keys to move line-by-line. Quit the <code>man</code> pages by typing \"q\".</p> <p>The command to change locations is <code>cd</code> followed by a directory name to change our working directory. <code>cd</code> stands for \"change directory\", which is a bit misleading: the command doesn't change the directory, it changes the shell's idea of what directory we are in.</p> <p>Let's say we want to move to the <code>Documents</code> directory we saw above.  We can use the following series of commands to get there:</p> <pre><code>$ cd Documents\n</code></pre> <p>These commands will move us from our home directory onto into the <code>Documents</code> directory. <code>cd</code> doesn't print anything, but if we run <code>pwd</code> after it, we can see that we are now in <code>/home/xj103/Documents</code>.</p> <p>We now know how to go down the directory tree, but how do we go up? There is a shortcut in the shell to move up one directory level that looks like this:</p> <pre><code>$ cd ..\n</code></pre> <p><code>..</code> is a special directory name meaning \"the directory containing this one\", or more succinctly, the parent of the current directory. Sure enough, if we run <code>pwd</code> after running <code>cd ..</code>, we're back in <code>/home/xj103</code>:</p> <pre><code>$ pwd\n</code></pre> <pre><code>/home/xj103\n</code></pre> <p>The special directory <code>..</code> doesn't usually show up when we run <code>ls</code>.  If we want to display it, we can give <code>ls</code> the <code>-a</code> flag:</p> <pre><code>$ ls -F -a\n</code></pre> <p><code>-a</code> stands for \"show all\"; it forces <code>ls</code> to show us file and directory names that begin with <code>.</code>, such as <code>..</code> (which, if we're in <code>/home/xj103/Documents</code>, refers to the <code>/home/xj103</code> directory) As you can see, it also displays another special directory that's just called <code>.</code>, which means \"the current working directory\". It may seem redundant to have a name for it, but we'll see some uses for it soon.</p> <p>Note that in most command line tools, multiple parameters can be combined with a single <code>-</code> and no spaces between the parameters: <code>ls -F -a</code> is equivalent to <code>ls -Fa</code>.</p> <p>These then, are the basic commands for navigating the filesystem on your computer: <code>pwd</code>, <code>ls</code> and <code>cd</code>.  Let's explore some variations on those commands.  What happens if you type <code>cd</code> on its own, without giving a directory?  </p> <pre><code>$ cd\n</code></pre> <p>How can you check what happened?  <code>pwd</code> gives us the answer!  </p> <pre><code>$ pwd\n</code></pre> <pre><code>/home/xj103\n</code></pre> <p>It turns out that <code>cd</code> without an argument will return you to your home directory, which is great if you've gotten lost in your own filesystem.  </p> <pre><code>$ cd \n</code></pre> <p>Check that we've moved to the right place by running <code>pwd</code> and <code>ls -F</code> </p> <p>If we want to move up one level from the data directory, we could use <code>cd ..</code>.  But there is another way to move to any directory, regardless of your current location.  </p> <p>So far, when specifying directory names, or even a directory path (as above), we have been using relative paths.  When you use a relative path with a command like <code>ls</code> or <code>cd</code>, it tries to find that location from where we are, rather than from the root of the file system.  </p> <p>However, it is possible to specify the absolute path to a directory by including its entire path from the root directory, which is indicated by a leading slash.  The leading <code>/</code> tells the computer to follow the path from the root of the file system, so it always refers to exactly one directory, no matter where we are when we run the command.</p> <p>This allows us to move to our <code>examples</code> directory from anywhere on the filesystem.  To find the absolute path we're looking for, we can use <code>pwd</code> and then extract the piece we need to move to <code>examples</code>.  </p> <pre><code>$ pwd\n</code></pre> <pre><code>$ cd /home/xj103/Documents/\n</code></pre> <p>Run <code>pwd</code> and <code>ls -F</code> to ensure that we're in the directory we expect.  </p>"},{"location":"Lecture_2_intro_to_unix/#two-more-shortcuts","title":"Two More Shortcuts","text":"<p>The shell interprets the character <code>~</code> (tilde) at the start of a path to mean \"the current user's home directory\". For example, if my home directory is <code>/home/xj103</code>, then <code>~/rcaes</code> is equivalent to <code>/home/xj103/rcaes</code>. This only works if it is the first character in the path.</p> <p>Another shortcut is the <code>-</code> (dash) character.  <code>cd</code> will translate <code>-</code> into the previous directory I was in, which is faster than having to remember, then type, the full path.  This is a very efficient way of moving back and forth between directories. The difference between <code>cd ..</code> and <code>cd -</code> is that the former brings you up, while the latter brings you back. You can think of it as the Last Channel button on a TV remote.</p>"},{"location":"Lecture_2_intro_to_unix/#tab-completion","title":"Tab Completion","text":"<p>Typing the full path to directories and files can be slow and annoying. Fortunately, we have \"tab completion\" to help us. Try typing <code>cd Doc</code> and then press the <code>&lt;tab&gt;</code>. The system will try to \"auto complete\" your command. Pressing tab twice brings up a list of all the files, and so on. This is called tab completion, and we will see it in many other tools as we go on.</p>"},{"location":"Lecture_2_intro_to_unix/#key-points","title":"Key Points:","text":"<ul> <li>\"The file system is responsible for managing information on the disk.\"</li> <li>\"Information is stored in files, which are stored in directories (folders).\"</li> <li>\"Directories can also store other directories, which forms a directory tree.\"</li> <li>\"<code>cd path</code> changes the current working directory.\"</li> <li>\"<code>ls path</code> prints a listing of a specific file or directory; <code>ls</code> on its own lists the current working directory.\"</li> <li><code>pwd</code> prints the user's current working directory.</li> <li><code>whoami</code> shows the user's current identity.</li> <li><code>/</code> on its own is the root directory of the whole file system.</li> <li>A relative path specifies a location starting from the current location.</li> <li>An absolute path specifies a location from the root of the file system.</li> <li>Directory names in a path are separated with '/' (forward slash) on Unix, but '\\\\' (backslash) on Windows.</li> <li>'..' means 'the directory above the current one'; '.' on its own means 'the current directory'.</li> <li>Most files' names are <code>something.extension</code>. The extension isn't required, and doesn't guarantee anything, but is normally used to indicate the type of data in the file.</li> <li>Most commands take options (flags) which begin with a '-'.</li> </ul>"},{"location":"Lecture_2_intro_to_unix/#working-with-files-and-directories","title":"Working with Files and Directories","text":"<p>We now know how to explore files and directories, but how do we create them in the first place? Let's go back to our home directory and use <code>ls -F</code> to see what it contains:</p> <pre><code>$ cd\n$ pwd\n</code></pre> <pre><code>/home/xj103/\n</code></pre> <p>Let's create a new directory called <code>thesis</code> using the command <code>mkdir thesis</code> (which has no output):</p> <pre><code>$ mkdir thesis\n</code></pre> <p>As you might guess from its name, <code>mkdir</code> means \"make directory\". Since <code>thesis</code> is a relative path (i.e., doesn't have a leading slash), the new directory is created in the current working directory:</p> <pre><code>$ ls -F\n</code></pre>"},{"location":"Lecture_2_intro_to_unix/#good-names-for-files-and-directories","title":"Good names for files and directories","text":"<p>Complicated names of files and directories can make your life painful  when working on the command line. Here we provide a few useful  tips for the names of your files.</p> <ol> <li> <p>Don't use whitespaces.</p> <p>Whitespaces can make a name more meaningful    but since whitespace is used to break arguments on the command line    is better to avoid them on name of files and directories. You can use <code>-</code> (dash) and <code>_</code> (underscore) instead of whitespace.</p> </li> <li> <p>Don't begin the name with <code>-</code> (dash).</p> <p>Commands treat names starting with <code>-</code> as options.</p> </li> <li> <p>Stick with letters, numbers, <code>.</code> (period), <code>-</code> (dash) and <code>_</code> (underscore).</p> <p>Many other characters have special meanings on the command line. We will learn about some of these during this lesson. There are special characters that can cause your command to not work as expected and can even result in data loss.</p> </li> </ol> <p>If you need to refer to names of files or directories that have whitespace  or another non-alphanumeric character, you should surround the name in quotes (<code>\"\"</code>).</p> <p>Since we've just created the <code>thesis</code> directory, there's nothing in it yet:</p> <pre><code>$ ls -F thesis\n</code></pre> <p>Let's change our working directory to <code>thesis</code> using <code>cd</code>. We then create a blank new file called <code>draft.txt</code> using the <code>touch command</code>:</p> <pre><code>$ cd thesis\n$ touch draft.txt\n</code></pre> <p>Now we can edit the file in JupyterLab's text editor. Let's type in a few lines of text. Once we're happy with our text, we save the file, and return to the shell.</p> <p><code>ls</code> now shows that we have created a file called <code>draft.txt</code>:</p> <pre><code>$ ls\ndraft.txt\n</code></pre> <p>Let's tidy up by running <code>rm draft.txt</code>:</p> <pre><code>$ rm draft.txt\n</code></pre> <p>This command removes files (<code>rm</code> is short for \"remove\"). If we run <code>ls</code> again, its output is empty once more, which tells us that our file is gone:</p> <pre><code>$ ls\n</code></pre>"},{"location":"Lecture_2_intro_to_unix/#deleting-is-forever","title":"Deleting Is Forever","text":"<p>The Unix shell doesn't have a trash bin that we can recover deleted files from (though most graphical interfaces to Unix do).  Instead, when we delete files, they are unhooked from the file system so that their storage space on disk can be recycled. Tools for finding and recovering deleted files do exist, but there's no guarantee they'll work in any particular situation, since the computer may recycle the file's disk space right away.</p> <p>Let's re-create that file and then move up one directory to <code>/home/xj103</code> using <code>cd ..</code>:</p> <pre><code>$ touch draft.txt\n$ cd ..\n</code></pre> <p>If we try to remove the entire <code>thesis</code> directory using <code>rm thesis</code>, we get an error message:</p> <pre><code>$ rm thesis\n</code></pre> <pre><code>rm: cannot remove `thesis`: Is a directory\n</code></pre> <p>This happens because <code>rm</code> by default only works on files, not directories.</p> <p>To really get rid of <code>thesis</code> we must also delete the file <code>draft.txt</code>. We can do this with the recursive option for <code>rm</code>:</p> <pre><code>$ rm -r thesis\n</code></pre>"},{"location":"Lecture_2_intro_to_unix/#with-great-power-comes-great-responsibility","title":"With Great Power Comes Great Responsibility","text":"<p>Removing the files in a directory recursively can be very dangerous  operation. If we're concerned about what we might be deleting we can  add the \"interactive\" flag <code>-i</code> to <code>rm</code> which will ask us for confirmation  before each step</p> <pre><code> $ rm -r -i thesis\n rm: descend into directory \u2018thesis\u2019? y\n rm: remove regular file \u2018thesis/draft.txt\u2019? y\n rm: remove directory \u2018thesis\u2019? y\n</code></pre> <p>This removes everything in the directory, then the directory itself, asking  at each step for you to confirm the deletion.</p> <p>Let's create that directory and file one more time.</p> <pre><code>$ mkdir thesis\n$ touch thesis/draft.txt\n$ ls thesis\n</code></pre> <pre><code>draft.txt\n</code></pre> <p><code>draft.txt</code> isn't a particularly informative name, so let's change the file's name using <code>mv</code>, which is short for \"move\":</p> <pre><code>$ mv thesis/draft.txt thesis/quotes.txt\n</code></pre> <p>The first parameter tells <code>mv</code> what we're \"moving\", while the second is where it's to go. In this case, we're moving <code>thesis/draft.txt</code> to <code>thesis/quotes.txt</code>, which has the same effect as renaming the file. Sure enough, <code>ls</code> shows us that <code>thesis</code> now contains one file called <code>quotes.txt</code>:</p> <pre><code>$ ls thesis\n</code></pre> <pre><code>quotes.txt\n</code></pre> <p>One has to be careful when specifying the target file name, since <code>mv</code> will silently overwrite any existing file with the same name, which could lead to data loss. An additional flag, <code>mv -i</code> (or <code>mv --interactive</code>), can be used to make <code>mv</code> ask you for confirmation before overwriting.</p> <p>Just for the sake of consistency, <code>mv</code> also works on directories</p> <p>Let's move <code>quotes.txt</code> into the current working directory. We use <code>mv</code> once again, but this time we'll just use the name of a directory as the second parameter to tell <code>mv</code> that we want to keep the filename, but put the file somewhere new. (This is why the command is called \"move\".) In this case, the directory name we use is the special directory name <code>.</code> that we mentioned earlier.</p> <pre><code>$ mv thesis/quotes.txt .\n</code></pre> <p>The effect is to move the file from the directory it was in to the current working directory. <code>ls</code> now shows us that <code>thesis</code> is empty:</p> <pre><code>$ ls thesis\n</code></pre> <p>Further, <code>ls</code> with a filename or directory name as a parameter only lists that file or directory. We can use this to see that <code>quotes.txt</code> is still in our current directory:</p> <pre><code>$ ls quotes.txt\n</code></pre> <pre><code>quotes.txt\n</code></pre> <p>The <code>cp</code> command works very much like <code>mv</code>, except it copies a file instead of moving it. We can check that it did the right thing using <code>ls</code> with two paths as parameters --- like most Unix commands, <code>ls</code> can be given multiple paths at once:</p> <pre><code>$ cp quotes.txt thesis/quotations.txt\n$ ls \n</code></pre> <pre><code>quotes.txt   thesis/quotations.txt\n</code></pre> <p>To prove that we made a copy, let's delete the <code>quotes.txt</code> file in the current directory and then run that same <code>ls</code> again.</p> <pre><code>$ rm quotes.txt\n$ ls quotes.txt thesis/quotations.txt\n</code></pre> <pre><code>ls: cannot access quotes.txt: No such file or directory\nthesis/quotations.txt\n</code></pre> <p>This time it tells us that it can't find <code>quotes.txt</code> in the current directory, but it does find the copy in <code>thesis</code> that we didn't delete.</p>"},{"location":"Lecture_2_intro_to_unix/#key-points_1","title":"Key Points","text":"<ul> <li><code>cp old new</code> copies a file.</li> <li><code>mkdir path</code> creates a new directory.</li> <li><code>mv old new</code> moves (renames) a file or directory.</li> <li><code>rm path</code> removes (deletes) a file.</li> <li>Use of the Control key may be described in many ways, including <code>Ctrl-X</code>, <code>Control-X</code>, and <code>^X</code>.</li> <li>The shell does not have a trash bin: once something is deleted, it's really gone.</li> <li>Depending on the type of work you do, you may need a more powerful text editor than Nano.</li> </ul>"},{"location":"Lecture_2_intro_to_unix/#learning-more","title":"Learning More","text":"<p>The goal of this lesson was to familiarize you with the basics of working with files and directories. There is a lot more to the unix shell and filexsystem than what we have  covered here! To ge deeper with self study, we recommend the excellent Software Carpentry Unix Shell Lesson, on which the above material was based.</p>"},{"location":"Lecture_3_GitHub/","title":"Summary of useful Git commands","text":""},{"location":"Lecture_3_GitHub/#configuring","title":"Configuring:","text":"<p>Set up your username and email</p> <pre><code>git config --global user.name \"Xiaomeng Jin\"\ngit config --global user.email \"xiaomeng.jin@rutgers.edu\"\n</code></pre>"},{"location":"Lecture_3_GitHub/#branches","title":"Branches:","text":"<p>Branches are an important part of working with Git.  Any commits you make will be made on the branch you're currently \u201cchecked out\u201d to. Use git status to see which branch that is.</p> <pre><code>git branch [branch-name] #creates a new branch\ngit checkout [branch-name] # switch to the specified branch and updates the working directory\ngit merge [branch] # combines the specified branch's history into the current branch.\ngit branch -d [branch-name] #deletes the specified branch\n</code></pre>"},{"location":"Lecture_3_GitHub/#create-repositories","title":"Create repositories:","text":"<p>Start out a new repository:</p> <pre><code>cd my_project\ngit init      \n</code></pre> <p>Or clone a repository using git clone</p> <pre><code>git clone https://github.com/rcaes2023/assignment_1_python-MazvitaChikomo.git\n</code></pre> <p>Or clone a repository using GitHub Command Line OWNER/REPO syntax.</p> <pre><code>gh repo clone rcaes2023/assignment_1_python-MazvitaChikomo\ncd assignment_1_python-MazvitaChikomo\n</code></pre> <p>If you want to get a repository that you don't have permission to push to, you can fork the repository.</p> <pre><code>gh repo fork cli/cli\n</code></pre>"},{"location":"Lecture_3_GitHub/#make-changes","title":"Make Changes","text":"<p>Browse and inspect the evolution of project files</p> <pre><code>git status    # tells you which branch you are at, what files are staged, which ones have been modified, are new,...\ngit log       # view the commit log\ngit diff      # view file content differences\n</code></pre> <p>Version control</p> <pre><code>git add &lt;filenames&gt;  #Snapshots the file in preparation for versioning\ngit commit -m \"your brief commit message goes here\" #Records file snapshots permanently in version history\n</code></pre>"},{"location":"Lecture_3_GitHub/#synchronize-changes","title":"Synchronize changes:","text":"<pre><code>git push #uploads all local branch commits to GitHub\ngit pull # updates your current local working branch with all new commits from the corresponding remote branch on GitHub.\n</code></pre>"},{"location":"Lecture_3_GitHub/#basic-github-workflow","title":"Basic GitHub workflow:","text":"<ul> <li>clone your local repo with <code>gh repo clone &lt;REPO&gt;</code>,</li> <li>make your changes and stage them with <code>git add &lt;filenames&gt;</code>,</li> <li>commit your changes with <code>git commit -m \"your brief commit message goes here\"</code>, and</li> <li>upload the changes to GitHub with<code>git push</code></li> </ul>"},{"location":"Lecture_3_functions_classes_modules/","title":"Lecture 3 Python Functions and Classes","text":"In\u00a0[48]: Copied! <pre># define a function\ndef say_hello():\n\"\"\"Return the word hello.\"\"\"\n    return 'Hello'\n</pre> # define a function def say_hello():     \"\"\"Return the word hello.\"\"\"     return 'Hello' In\u00a0[49]: Copied! <pre># functions are also objects\ntype(say_hello)\n</pre> # functions are also objects type(say_hello) Out[49]: <pre>function</pre> In\u00a0[50]: Copied! <pre># this doesnt call\nsay_hello?\n</pre> # this doesnt call say_hello? <pre>Signature: say_hello()\nDocstring: Return the word hello.\nFile:      /var/folders/7b/6t7qqfj57bb0_ml_y_5bw86r0000gn/T/ipykernel_76551/1650374671.py\nType:      function</pre> In\u00a0[51]: Copied! <pre># this does\nsay_hello()\n</pre> # this does say_hello() Out[51]: <pre>'Hello'</pre> In\u00a0[52]: Copied! <pre># assign the result to something\nres = say_hello()\nres\n</pre> # assign the result to something res = say_hello() res Out[52]: <pre>'Hello'</pre> In\u00a0[12]: Copied! <pre># take some arguments\ndef say_hello_to(name):\n\"\"\"Return a greeting to `name`\"\"\"\n    return 'Hello ' + name\n</pre> # take some arguments def say_hello_to(name):     \"\"\"Return a greeting to `name`\"\"\"     return 'Hello ' + name In\u00a0[13]: Copied! <pre># intended usage\nsay_hello_to('World')\n</pre> # intended usage say_hello_to('World') Out[13]: <pre>'Hello World'</pre> In\u00a0[14]: Copied! <pre>say_hello_to(10)\n</pre> say_hello_to(10) <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[14], line 1\n----&gt; 1 say_hello_to(10)\n\nCell In[12], line 4, in say_hello_to(name)\n      2 def say_hello_to(name):\n      3 \"\"\"Return a greeting to `name`\"\"\"\n----&gt; 4     return 'Hello ' + name\n\nTypeError: can only concatenate str (not \"int\") to str</pre> In\u00a0[15]: Copied! <pre># redefine the function\ndef say_hello_to(name):\n\"\"\"Return a greeting to `name`\"\"\"\n    return 'Hello ' + str(name)\n</pre> # redefine the function def say_hello_to(name):     \"\"\"Return a greeting to `name`\"\"\"     return 'Hello ' + str(name) In\u00a0[16]: Copied! <pre>say_hello_to(10)\n</pre> say_hello_to(10) Out[16]: <pre>'Hello 10'</pre> In\u00a0[17]: Copied! <pre># take an optional keyword argument\ndef say_hello_language(name, chinese=False):\n\"\"\"Say hello in multiple languages.\"\"\"\n    if chinese:\n        greeting = 'Ni Hao '\n    else:\n        greeting = 'Hello '\n    return greeting + name\n</pre> # take an optional keyword argument def say_hello_language(name, chinese=False):     \"\"\"Say hello in multiple languages.\"\"\"     if chinese:         greeting = 'Ni Hao '     else:         greeting = 'Hello '     return greeting + name In\u00a0[18]: Copied! <pre>print(say_hello_language('Matt'))\nprint(say_hello_language('Siyi', chinese=True))\n</pre> print(say_hello_language('Matt')) print(say_hello_language('Siyi', chinese=True))  <pre>Hello Matt\nNi Hao Siyi\n</pre> In\u00a0[19]: Copied! <pre># flexible number of arguments\ndef say_hello_to_everyone(*args):\n    return ['hello ' + str(a) for a in args]\n</pre> # flexible number of arguments def say_hello_to_everyone(*args):     return ['hello ' + str(a) for a in args] In\u00a0[20]: Copied! <pre>say_hello_to_everyone('Matt', 'Siyi', 'Kerry')\n</pre> say_hello_to_everyone('Matt', 'Siyi', 'Kerry') Out[20]: <pre>['hello Matt', 'hello Siyi', 'hello Kerry']</pre> In\u00a0[53]: Copied! <pre># The function doesn't return anything, but it changes the input arguments. \ndef remove_last_from_list(input_list):\n    input_list.pop()\n</pre> # The function doesn't return anything, but it changes the input arguments.  def remove_last_from_list(input_list):     input_list.pop() In\u00a0[22]: Copied! <pre>names = ['Matt', 'Siyi', 'Kerry']\nremove_last_from_list(names)\nprint(names)\nremove_last_from_list(names)\nprint(names)\n</pre> names = ['Matt', 'Siyi', 'Kerry'] remove_last_from_list(names) print(names) remove_last_from_list(names) print(names) <pre>['Matt', 'Siyi']\n['Matt']\n</pre> <p>We can do something similar with a pure function.</p> <p>In general, pure functions are safer and more reliable.</p> In\u00a0[23]: Copied! <pre>def remove_last_from_list_pure(input_list):\n    new_list = input_list.copy()\n    new_list.pop()\n    return new_list\n</pre> def remove_last_from_list_pure(input_list):     new_list = input_list.copy()     new_list.pop()     return new_list In\u00a0[24]: Copied! <pre>names = ['Matt', 'Siyi', 'Kerry']\nnew_names = remove_last_from_list_pure(names)\nprint(names)\nprint(new_names)\n</pre> names = ['Matt', 'Siyi', 'Kerry'] new_names = remove_last_from_list_pure(names) print(names) print(new_names) <pre>['Matt', 'Siyi', 'Kerry']\n['Matt', 'Siyi']\n</pre> <p>We could spend the rest of the day talking about functions, but we have to move on.</p> In\u00a0[25]: Copied! <pre># Create a class named Student with a name. \nclass Student:\n    name = 'Matt'\n</pre> # Create a class named Student with a name.  class Student:     name = 'Matt' In\u00a0[26]: Copied! <pre>print(Student.name)\n</pre> print(Student.name) <pre>Matt\n</pre> In\u00a0[27]: Copied! <pre>class Student:\n    \n    def __init__(self, name):\n        self.name = name\n</pre> class Student:          def __init__(self, name):         self.name = name  In\u00a0[28]: Copied! <pre>s1 = Student('Matt')\ns1\n</pre> s1 = Student('Matt') s1 Out[28]: <pre>&lt;__main__.Student at 0x111dfa250&gt;</pre> <p>Our class only has a single attribute so far:</p> In\u00a0[29]: Copied! <pre>s1.name\n</pre> s1.name Out[29]: <pre>'Matt'</pre> <p>Let's add more, along with some input validation:</p> In\u00a0[54]: Copied! <pre>class Student:\n    \n    def __init__(self, name, age, major):\n        self.name = name.upper()\n        self.major = major\n        self.age = age\n</pre> class Student:          def __init__(self, name, age, major):         self.name = name.upper()         self.major = major         self.age = age          In\u00a0[57]: Copied! <pre>s1 = Student('Matt', 22, 'Environmental Science')\n</pre> s1 = Student('Matt', 22, 'Environmental Science')  In\u00a0[58]: Copied! <pre>s1.major\n</pre> s1.major Out[58]: <pre>'Environmental Science'</pre> In\u00a0[59]: Copied! <pre>s1.name\n</pre> s1.name Out[59]: <pre>'MATT'</pre> In\u00a0[60]: Copied! <pre>s1.age\n</pre> s1.age Out[60]: <pre>22</pre> In\u00a0[61]: Copied! <pre>class Student:\n    \n    def __init__(self, name, age, major):\n        self.name = name.upper()\n        self.major = major\n        \n        if age&lt;0:\n            raise ValueError(f'Invalid age {age}')\n        self.age = age\n</pre> class Student:          def __init__(self, name, age, major):         self.name = name.upper()         self.major = major                  if age&lt;0:             raise ValueError(f'Invalid age {age}')         self.age = age          In\u00a0[62]: Copied! <pre>s1 = Student('Matt', -46, 'Environmental Science')\ns1\n</pre> s1 = Student('Matt', -46, 'Environmental Science') s1 <pre>\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[62], line 1\n----&gt; 1 s1 = Student('Matt', -46, 'Environmental Science')\n      2 s1\n\nCell In[61], line 8, in Student.__init__(self, name, age, major)\n      5 self.major = major\n      7 if age&lt;0:\n----&gt; 8     raise ValueError(f'Invalid age {age}')\n      9 self.age = age\n\nValueError: Invalid age -46</pre> In\u00a0[63]: Copied! <pre>s1 = Student('Matt', 22, 'Environmental Science')\ns1\n</pre> s1 = Student('Matt', 22, 'Environmental Science') s1 Out[63]: <pre>&lt;__main__.Student at 0x1123fe6d0&gt;</pre> In\u00a0[36]: Copied! <pre>class Student:\n    \n    def __init__(self, name, age, major):\n        self.name = name.upper()\n        self.major = major\n        \n        if age&lt;0:\n            raise ValueError(f'Invalid age {age}')\n        self.age = age\n    \n    def is_ES(self):\n        return self.major == 'Environmental Science'\n</pre> class Student:          def __init__(self, name, age, major):         self.name = name.upper()         self.major = major                  if age&lt;0:             raise ValueError(f'Invalid age {age}')         self.age = age          def is_ES(self):         return self.major == 'Environmental Science' In\u00a0[37]: Copied! <pre>s1 = Student('Matt', 22, 'Environmental Science')\ns1.is_ES()\n</pre> s1 = Student('Matt', 22, 'Environmental Science') s1.is_ES() Out[37]: <pre>True</pre> In\u00a0[38]: Copied! <pre>s2 = Student('Siyi', 25, 'Ecology')\ns2.is_ES()\n</pre> s2 = Student('Siyi', 25, 'Ecology') s2.is_ES() Out[38]: <pre>False</pre> In\u00a0[39]: Copied! <pre>s1.age = 40\n</pre> s1.age = 40 In\u00a0[40]: Copied! <pre>s1.age\n</pre> s1.age Out[40]: <pre>40</pre> In\u00a0[41]: Copied! <pre>del(s1.age)\n</pre> del(s1.age) In\u00a0[42]: Copied! <pre>s1.age\n</pre> s1.age <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[42], line 1\n----&gt; 1 s1.age\n\nAttributeError: 'Student' object has no attribute 'age'</pre> In\u00a0[43]: Copied! <pre>s2.age\n</pre> s2.age Out[43]: <pre>25</pre> In\u00a0[44]: Copied! <pre>s1.is_ES()\n</pre> s1.is_ES() Out[44]: <pre>True</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"Lecture_3_functions_classes_modules/#lecture-3-python-functions-and-classes","title":"Lecture 3 Python Functions and Classes\u00b6","text":"<p>For longer and more complex tasks, it is important to organize your code into reuseable elements. For example, if you find yourself cutting and pasting the same or similar lines of code over and over, you probably need to define a function to encapsulate that code and make it reusable. An important principle in programming in DRY: \"don't repeat yourself\". Repetition is tedious and opens you up to errors. Strive for elegance and simplicity in your programs.</p>"},{"location":"Lecture_3_functions_classes_modules/#functions","title":"Functions\u00b6","text":"<p>Functions are a central part of advanced python programming. Functions take some inputs (\"arguments\") and do something in response. Usually functions return something, but not always.</p>"},{"location":"Lecture_3_functions_classes_modules/#pure-vs-impure-functions","title":"Pure vs. Impure Functions\u00b6","text":"<p>Functions that don't modify their arguments or produce any other side-effects are called pure.</p> <p>Functions that modify their arguments or cause other actions to occur are called impure.</p> <p>Below is an impure function.</p>"},{"location":"Lecture_3_functions_classes_modules/#classes","title":"Classes\u00b6","text":"<p>We have worked with many different types of python objects so far: strings, lists, dictionaries, etc. These objects have different attributes and respond in different ways to the built-in functions (<code>len</code>, etc.)</p> <p>Python is an object oriented programming language.</p> <p>Almost everything in Python is an object, with its properties and methods.</p> <p>How can we make our own, custom objects? Answer: by defining classes.</p>"},{"location":"Lecture_3_functions_classes_modules/#a-class-to-represent-a-student","title":"A class to represent a Student\u00b6","text":""},{"location":"Lecture_3_functions_classes_modules/#the-__init__-function","title":"The __init__() function\u00b6","text":"<p>All classes have a function called __init__(), which is always executed when the class is being initiated.</p>"},{"location":"Lecture_3_functions_classes_modules/#now-lets-add-a-custom-method","title":"Now let's add a custom method:\u00b6","text":""},{"location":"Lecture_3_functions_classes_modules/#modify-object-properties","title":"Modify Object Properties\u00b6","text":""},{"location":"Lecture_4_numpy_and_matplotlib/","title":"Lecture 4: Numpy and Matplotlib","text":"In\u00a0[1]: Copied! <pre>import numpy as np\n</pre> import numpy as np <p>What did we just do? We imported a package. This brings new variables (mostly functions) into our interpreter. We access them as follows.</p> In\u00a0[3]: Copied! <pre># find out what's in numpy\ndir(np)\n</pre> # find out what's in numpy dir(np) Out[3]: <pre>['ALLOW_THREADS',\n 'AxisError',\n 'BUFSIZE',\n 'CLIP',\n 'ComplexWarning',\n 'DataSource',\n 'ERR_CALL',\n 'ERR_DEFAULT',\n 'ERR_IGNORE',\n 'ERR_LOG',\n 'ERR_PRINT',\n 'ERR_RAISE',\n 'ERR_WARN',\n 'FLOATING_POINT_SUPPORT',\n 'FPE_DIVIDEBYZERO',\n 'FPE_INVALID',\n 'FPE_OVERFLOW',\n 'FPE_UNDERFLOW',\n 'False_',\n 'Inf',\n 'Infinity',\n 'MAXDIMS',\n 'MAY_SHARE_BOUNDS',\n 'MAY_SHARE_EXACT',\n 'MachAr',\n 'ModuleDeprecationWarning',\n 'NAN',\n 'NINF',\n 'NZERO',\n 'NaN',\n 'PINF',\n 'PZERO',\n 'PackageLoader',\n 'RAISE',\n 'RankWarning',\n 'SHIFT_DIVIDEBYZERO',\n 'SHIFT_INVALID',\n 'SHIFT_OVERFLOW',\n 'SHIFT_UNDERFLOW',\n 'ScalarType',\n 'Tester',\n 'TooHardError',\n 'True_',\n 'UFUNC_BUFSIZE_DEFAULT',\n 'UFUNC_PYVALS_NAME',\n 'VisibleDeprecationWarning',\n 'WRAP',\n '_NoValue',\n '__NUMPY_SETUP__',\n '__all__',\n '__builtins__',\n '__cached__',\n '__config__',\n '__doc__',\n '__file__',\n '__git_revision__',\n '__loader__',\n '__mkl_version__',\n '__name__',\n '__package__',\n '__path__',\n '__spec__',\n '__version__',\n '_distributor_init',\n '_globals',\n '_import_tools',\n '_mat',\n 'abs',\n 'absolute',\n 'absolute_import',\n 'add',\n 'add_docstring',\n 'add_newdoc',\n 'add_newdoc_ufunc',\n 'add_newdocs',\n 'alen',\n 'all',\n 'allclose',\n 'alltrue',\n 'amax',\n 'amin',\n 'angle',\n 'any',\n 'append',\n 'apply_along_axis',\n 'apply_over_axes',\n 'arange',\n 'arccos',\n 'arccosh',\n 'arcsin',\n 'arcsinh',\n 'arctan',\n 'arctan2',\n 'arctanh',\n 'argmax',\n 'argmin',\n 'argpartition',\n 'argsort',\n 'argwhere',\n 'around',\n 'array',\n 'array2string',\n 'array_equal',\n 'array_equiv',\n 'array_repr',\n 'array_split',\n 'array_str',\n 'asanyarray',\n 'asarray',\n 'asarray_chkfinite',\n 'ascontiguousarray',\n 'asfarray',\n 'asfortranarray',\n 'asmatrix',\n 'asscalar',\n 'atleast_1d',\n 'atleast_2d',\n 'atleast_3d',\n 'average',\n 'bartlett',\n 'base_repr',\n 'bench',\n 'binary_repr',\n 'bincount',\n 'bitwise_and',\n 'bitwise_not',\n 'bitwise_or',\n 'bitwise_xor',\n 'blackman',\n 'block',\n 'bmat',\n 'bool',\n 'bool8',\n 'bool_',\n 'broadcast',\n 'broadcast_arrays',\n 'broadcast_to',\n 'busday_count',\n 'busday_offset',\n 'busdaycalendar',\n 'byte',\n 'byte_bounds',\n 'bytes0',\n 'bytes_',\n 'c_',\n 'can_cast',\n 'cast',\n 'cbrt',\n 'cdouble',\n 'ceil',\n 'cfloat',\n 'char',\n 'character',\n 'chararray',\n 'choose',\n 'clip',\n 'clongdouble',\n 'clongfloat',\n 'column_stack',\n 'common_type',\n 'compare_chararrays',\n 'compat',\n 'complex',\n 'complex128',\n 'complex256',\n 'complex64',\n 'complex_',\n 'complexfloating',\n 'compress',\n 'concatenate',\n 'conj',\n 'conjugate',\n 'convolve',\n 'copy',\n 'copysign',\n 'copyto',\n 'core',\n 'corrcoef',\n 'correlate',\n 'cos',\n 'cosh',\n 'count_nonzero',\n 'cov',\n 'cross',\n 'csingle',\n 'ctypeslib',\n 'cumprod',\n 'cumproduct',\n 'cumsum',\n 'datetime64',\n 'datetime_as_string',\n 'datetime_data',\n 'deg2rad',\n 'degrees',\n 'delete',\n 'deprecate',\n 'deprecate_with_doc',\n 'diag',\n 'diag_indices',\n 'diag_indices_from',\n 'diagflat',\n 'diagonal',\n 'diff',\n 'digitize',\n 'disp',\n 'divide',\n 'division',\n 'divmod',\n 'dot',\n 'double',\n 'dsplit',\n 'dstack',\n 'dtype',\n 'e',\n 'ediff1d',\n 'einsum',\n 'einsum_path',\n 'emath',\n 'empty',\n 'empty_like',\n 'equal',\n 'errstate',\n 'euler_gamma',\n 'exp',\n 'exp2',\n 'expand_dims',\n 'expm1',\n 'extract',\n 'eye',\n 'fabs',\n 'fastCopyAndTranspose',\n 'fft',\n 'fill_diagonal',\n 'find_common_type',\n 'finfo',\n 'fix',\n 'flatiter',\n 'flatnonzero',\n 'flexible',\n 'flip',\n 'fliplr',\n 'flipud',\n 'float',\n 'float128',\n 'float16',\n 'float32',\n 'float64',\n 'float_',\n 'float_power',\n 'floating',\n 'floor',\n 'floor_divide',\n 'fmax',\n 'fmin',\n 'fmod',\n 'format_parser',\n 'frexp',\n 'frombuffer',\n 'fromfile',\n 'fromfunction',\n 'fromiter',\n 'frompyfunc',\n 'fromregex',\n 'fromstring',\n 'full',\n 'full_like',\n 'fv',\n 'generic',\n 'genfromtxt',\n 'geomspace',\n 'get_array_wrap',\n 'get_include',\n 'get_printoptions',\n 'getbufsize',\n 'geterr',\n 'geterrcall',\n 'geterrobj',\n 'gradient',\n 'greater',\n 'greater_equal',\n 'half',\n 'hamming',\n 'hanning',\n 'heaviside',\n 'histogram',\n 'histogram2d',\n 'histogramdd',\n 'hsplit',\n 'hstack',\n 'hypot',\n 'i0',\n 'identity',\n 'iinfo',\n 'imag',\n 'in1d',\n 'index_exp',\n 'indices',\n 'inexact',\n 'inf',\n 'info',\n 'infty',\n 'inner',\n 'insert',\n 'int',\n 'int0',\n 'int16',\n 'int32',\n 'int64',\n 'int8',\n 'int_',\n 'int_asbuffer',\n 'intc',\n 'integer',\n 'interp',\n 'intersect1d',\n 'intp',\n 'invert',\n 'ipmt',\n 'irr',\n 'is_busday',\n 'isclose',\n 'iscomplex',\n 'iscomplexobj',\n 'isfinite',\n 'isfortran',\n 'isin',\n 'isinf',\n 'isnan',\n 'isnat',\n 'isneginf',\n 'isposinf',\n 'isreal',\n 'isrealobj',\n 'isscalar',\n 'issctype',\n 'issubclass_',\n 'issubdtype',\n 'issubsctype',\n 'iterable',\n 'ix_',\n 'kaiser',\n 'kron',\n 'ldexp',\n 'left_shift',\n 'less',\n 'less_equal',\n 'lexsort',\n 'lib',\n 'linalg',\n 'linspace',\n 'little_endian',\n 'load',\n 'loads',\n 'loadtxt',\n 'log',\n 'log10',\n 'log1p',\n 'log2',\n 'logaddexp',\n 'logaddexp2',\n 'logical_and',\n 'logical_not',\n 'logical_or',\n 'logical_xor',\n 'logspace',\n 'long',\n 'longcomplex',\n 'longdouble',\n 'longfloat',\n 'longlong',\n 'lookfor',\n 'ma',\n 'mafromtxt',\n 'mask_indices',\n 'mat',\n 'math',\n 'matmul',\n 'matrix',\n 'matrixlib',\n 'max',\n 'maximum',\n 'maximum_sctype',\n 'may_share_memory',\n 'mean',\n 'median',\n 'memmap',\n 'meshgrid',\n 'mgrid',\n 'min',\n 'min_scalar_type',\n 'minimum',\n 'mintypecode',\n 'mirr',\n 'mod',\n 'modf',\n 'moveaxis',\n 'msort',\n 'multiply',\n 'nan',\n 'nan_to_num',\n 'nanargmax',\n 'nanargmin',\n 'nancumprod',\n 'nancumsum',\n 'nanmax',\n 'nanmean',\n 'nanmedian',\n 'nanmin',\n 'nanpercentile',\n 'nanprod',\n 'nanstd',\n 'nansum',\n 'nanvar',\n 'nbytes',\n 'ndarray',\n 'ndenumerate',\n 'ndfromtxt',\n 'ndim',\n 'ndindex',\n 'nditer',\n 'negative',\n 'nested_iters',\n 'newaxis',\n 'nextafter',\n 'nonzero',\n 'not_equal',\n 'nper',\n 'npv',\n 'numarray',\n 'number',\n 'obj2sctype',\n 'object',\n 'object0',\n 'object_',\n 'ogrid',\n 'oldnumeric',\n 'ones',\n 'ones_like',\n 'outer',\n 'packbits',\n 'pad',\n 'partition',\n 'percentile',\n 'pi',\n 'piecewise',\n 'pkgload',\n 'place',\n 'pmt',\n 'poly',\n 'poly1d',\n 'polyadd',\n 'polyder',\n 'polydiv',\n 'polyfit',\n 'polyint',\n 'polymul',\n 'polynomial',\n 'polysub',\n 'polyval',\n 'positive',\n 'power',\n 'ppmt',\n 'print_function',\n 'prod',\n 'product',\n 'promote_types',\n 'ptp',\n 'put',\n 'putmask',\n 'pv',\n 'r_',\n 'rad2deg',\n 'radians',\n 'random',\n 'rank',\n 'rate',\n 'ravel',\n 'ravel_multi_index',\n 'real',\n 'real_if_close',\n 'rec',\n 'recarray',\n 'recfromcsv',\n 'recfromtxt',\n 'reciprocal',\n 'record',\n 'remainder',\n 'repeat',\n 'require',\n 'reshape',\n 'resize',\n 'result_type',\n 'right_shift',\n 'rint',\n 'roll',\n 'rollaxis',\n 'roots',\n 'rot90',\n 'round',\n 'round_',\n 'row_stack',\n 's_',\n 'safe_eval',\n 'save',\n 'savetxt',\n 'savez',\n 'savez_compressed',\n 'sctype2char',\n 'sctypeDict',\n 'sctypeNA',\n 'sctypes',\n 'searchsorted',\n 'select',\n 'set_numeric_ops',\n 'set_printoptions',\n 'set_string_function',\n 'setbufsize',\n 'setdiff1d',\n 'seterr',\n 'seterrcall',\n 'seterrobj',\n 'setxor1d',\n 'shape',\n 'shares_memory',\n 'short',\n 'show_config',\n 'sign',\n 'signbit',\n 'signedinteger',\n 'sin',\n 'sinc',\n 'single',\n 'singlecomplex',\n 'sinh',\n 'size',\n 'sometrue',\n 'sort',\n 'sort_complex',\n 'source',\n 'spacing',\n 'split',\n 'sqrt',\n 'square',\n 'squeeze',\n 'stack',\n 'std',\n 'str',\n 'str0',\n 'str_',\n 'string_',\n 'subtract',\n 'sum',\n 'swapaxes',\n 'take',\n 'tan',\n 'tanh',\n 'tensordot',\n 'test',\n 'testing',\n 'tile',\n 'timedelta64',\n 'trace',\n 'tracemalloc_domain',\n 'transpose',\n 'trapz',\n 'tri',\n 'tril',\n 'tril_indices',\n 'tril_indices_from',\n 'trim_zeros',\n 'triu',\n 'triu_indices',\n 'triu_indices_from',\n 'true_divide',\n 'trunc',\n 'typeDict',\n 'typeNA',\n 'typecodes',\n 'typename',\n 'ubyte',\n 'ufunc',\n 'uint',\n 'uint0',\n 'uint16',\n 'uint32',\n 'uint64',\n 'uint8',\n 'uintc',\n 'uintp',\n 'ulonglong',\n 'unicode',\n 'unicode_',\n 'union1d',\n 'unique',\n 'unpackbits',\n 'unravel_index',\n 'unsignedinteger',\n 'unwrap',\n 'ushort',\n 'vander',\n 'var',\n 'vdot',\n 'vectorize',\n 'version',\n 'void',\n 'void0',\n 'vsplit',\n 'vstack',\n 'warnings',\n 'where',\n 'who',\n 'zeros',\n 'zeros_like']</pre> In\u00a0[3]: Copied! <pre># find out what version we have\nnp.__version__\n</pre> # find out what version we have np.__version__ Out[3]: <pre>'1.25.1'</pre> <p>The numpy documentation is crucial!</p> <p>http://docs.scipy.org/doc/numpy/reference/</p> In\u00a0[5]: Copied! <pre># create an array from a list\na = np.array([9,0,2,1,0])\n</pre> # create an array from a list a = np.array([9,0,2,1,0]) In\u00a0[6]: Copied! <pre># find out the datatype\na.dtype\n</pre> # find out the datatype a.dtype Out[6]: <pre>dtype('int64')</pre> In\u00a0[7]: Copied! <pre># find out the shape\na.shape\n</pre> # find out the shape a.shape Out[7]: <pre>(5,)</pre> In\u00a0[8]: Copied! <pre># what is the shape\ntype(a.shape)\n</pre> # what is the shape type(a.shape) Out[8]: <pre>tuple</pre> In\u00a0[9]: Copied! <pre># another array with a different datatype and shape\nb = np.array([[5,3,1,9],[9,2,3,0]], dtype=np.float64)\n</pre> # another array with a different datatype and shape b = np.array([[5,3,1,9],[9,2,3,0]], dtype=np.float64) In\u00a0[98]: Copied! <pre># array with 3 rows x 4 columns\na_2d = np.array([[3,2,0,1],[9,1,8,7],[4,0,1,6]]) \na_2d\n</pre> # array with 3 rows x 4 columns a_2d = np.array([[3,2,0,1],[9,1,8,7],[4,0,1,6]])  a_2d Out[98]: <pre>array([[3, 2, 0, 1],\n       [9, 1, 8, 7],\n       [4, 0, 1, 6]])</pre> In\u00a0[99]: Copied! <pre># check dtype and shape\nb.dtype, b.shape\n</pre> # check dtype and shape b.dtype, b.shape Out[99]: <pre>(dtype('float64'), (2, 4))</pre> <p>Important Concept: The fastest varying dimension is the last dimension! The outer level of the hierarchy is the first dimension. (This is called \"c-style\" indexing)</p> In\u00a0[96]: Copied! <pre># create some uniform arrays\nc = np.zeros((9,9))\nd = np.ones((3,6,3), dtype=np.complex128)\ne = np.full((3,3), np.pi)\ne = np.ones_like(c)\nf = np.zeros_like(d)\n# \ng = np.random.rand(3,4)\n</pre> # create some uniform arrays c = np.zeros((9,9)) d = np.ones((3,6,3), dtype=np.complex128) e = np.full((3,3), np.pi) e = np.ones_like(c) f = np.zeros_like(d) #  g = np.random.rand(3,4) <p>The <code>np.arange()</code> function is used to generate an array with evenly spaced values within a given interval. <code>np.arange()</code> can be used with one, two, or three parameters to specify the start, stop, and step values. If only one value is passed to the function, it will be interpreted as the stop value:</p> In\u00a0[12]: Copied! <pre># create some ranges\nnp.arange(10)\n</pre> # create some ranges np.arange(10) Out[12]: <pre>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</pre> In\u00a0[13]: Copied! <pre># arange is left inclusive, right exclusive\nnp.arange(2,4,0.25)\n</pre> # arange is left inclusive, right exclusive np.arange(2,4,0.25) Out[13]: <pre>array([2.  , 2.25, 2.5 , 2.75, 3.  , 3.25, 3.5 , 3.75])</pre> <p>Similarly, the <code>np.linspace()</code> function is used to construct an array with evenly spaced numbers over a given interval. However, instead of the step parameter, <code>np.linspace()</code> takes a num parameter to specify the number of samples within the given interval:</p> In\u00a0[14]: Copied! <pre># linearly spaced\nnp.linspace(2,4,20)\n</pre> # linearly spaced np.linspace(2,4,20) Out[14]: <pre>array([2.        , 2.10526316, 2.21052632, 2.31578947, 2.42105263,\n       2.52631579, 2.63157895, 2.73684211, 2.84210526, 2.94736842,\n       3.05263158, 3.15789474, 3.26315789, 3.36842105, 3.47368421,\n       3.57894737, 3.68421053, 3.78947368, 3.89473684, 4.        ])</pre> <p>Note that unlike <code>np.arange()</code>, <code>np.linspace()</code> includes the stop value by default (this can be changed by passing <code>endpoint=True</code>). Finally, it should be noted that while we could have used <code>np.arange()</code> to generate the same array in the above example, it is recommended to use <code>np.linspace()</code> when a non-integer step (e.g. 0.25) is desired.</p> In\u00a0[87]: Copied! <pre>np.linspace(2,4,20, endpoint = False)\n</pre> np.linspace(2,4,20, endpoint = False) Out[87]: <pre>array([2. , 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3. , 3.1, 3.2,\n       3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9])</pre> In\u00a0[3]: Copied! <pre>x = np.linspace(-4, 4, 9)\n \ny = np.linspace(-5, 5, 11)\n \nx_2d, y_2d = np.meshgrid(x, y)\n</pre> x = np.linspace(-4, 4, 9)   y = np.linspace(-5, 5, 11)   x_2d, y_2d = np.meshgrid(x, y) In\u00a0[4]: Copied! <pre>x_2d\n</pre> x_2d Out[4]: <pre>array([[-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.],\n       [-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.],\n       [-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.],\n       [-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.],\n       [-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.],\n       [-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.],\n       [-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.],\n       [-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.],\n       [-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.],\n       [-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.],\n       [-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.]])</pre> In\u00a0[5]: Copied! <pre>y_2d\n</pre> y_2d Out[5]: <pre>array([[-5., -5., -5., -5., -5., -5., -5., -5., -5.],\n       [-4., -4., -4., -4., -4., -4., -4., -4., -4.],\n       [-3., -3., -3., -3., -3., -3., -3., -3., -3.],\n       [-2., -2., -2., -2., -2., -2., -2., -2., -2.],\n       [-1., -1., -1., -1., -1., -1., -1., -1., -1.],\n       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\n       [ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.],\n       [ 2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.],\n       [ 3.,  3.,  3.,  3.,  3.,  3.,  3.,  3.,  3.],\n       [ 4.,  4.,  4.,  4.,  4.,  4.,  4.,  4.,  4.],\n       [ 5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.]])</pre> In\u00a0[7]: Copied! <pre># get some individual elements of xx\nx_2d[0,0], x_2d[-1,-1], x_2d[3,-5]\n</pre> # get some individual elements of xx x_2d[0,0], x_2d[-1,-1], x_2d[3,-5] Out[7]: <pre>(-4.0, 4.0, 0.0)</pre> In\u00a0[8]: Copied! <pre># get some whole rows and columns\nx_2d[0].shape, x_2d[:,-1].shape\n</pre> # get some whole rows and columns x_2d[0].shape, x_2d[:,-1].shape Out[8]: <pre>((9,), (11,))</pre> In\u00a0[9]: Copied! <pre># get some ranges\nx_2d[3:10,3:5].shape\n</pre> # get some ranges x_2d[3:10,3:5].shape Out[9]: <pre>(7, 2)</pre> <p>There are many advanced ways to index arrays. You can read about them in the manual. Here is one example.</p> In\u00a0[10]: Copied! <pre># use a boolean array as an index\nidx = x_2d&lt;0\nx_2d[idx].shape\n</pre> # use a boolean array as an index idx = x_2d&lt;0 x_2d[idx].shape Out[10]: <pre>(44,)</pre> In\u00a0[11]: Copied! <pre># two dimensional grids\nx = np.linspace(-2*np.pi, 2*np.pi, 100)\ny = np.linspace(-np.pi, np.pi, 50)\nxx, yy = np.meshgrid(x, y)\nxx.shape, yy.shape\n</pre> # two dimensional grids x = np.linspace(-2*np.pi, 2*np.pi, 100) y = np.linspace(-np.pi, np.pi, 50) xx, yy = np.meshgrid(x, y) xx.shape, yy.shape Out[11]: <pre>((50, 100), (50, 100))</pre> In\u00a0[12]: Copied! <pre>f = np.sin(xx) * np.cos(0.5*yy)\n</pre> f = np.sin(xx) * np.cos(0.5*yy) <p>At this point you might be getting curious what these arrays \"look\" like. So we need to introduce some visualization.</p> In\u00a0[13]: Copied! <pre>from matplotlib import pyplot as plt\n# %matplotlib inline\n</pre> from matplotlib import pyplot as plt # %matplotlib inline In\u00a0[14]: Copied! <pre>plt.pcolormesh(f)\n</pre> plt.pcolormesh(f) Out[14]: <pre>&lt;matplotlib.collections.QuadMesh at 0x1143ebc10&gt;</pre> In\u00a0[15]: Copied! <pre># transpose\nplt.pcolormesh(f.T)\n</pre> # transpose plt.pcolormesh(f.T) Out[15]: <pre>&lt;matplotlib.collections.QuadMesh at 0x11457d760&gt;</pre> In\u00a0[16]: Copied! <pre># Flip the array up/down (reverse the order of the rows)\nplt.pcolormesh(np.flipud(f))\n</pre> # Flip the array up/down (reverse the order of the rows) plt.pcolormesh(np.flipud(f))  Out[16]: <pre>&lt;matplotlib.collections.QuadMesh at 0x1145e6e80&gt;</pre> In\u00a0[17]: Copied! <pre># reshape an array (wrong size)\ng = np.reshape(f, (8,9))\n</pre> # reshape an array (wrong size) g = np.reshape(f, (8,9)) <pre>\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[17], line 2\n      1 # reshape an array (wrong size)\n----&gt; 2 g = np.reshape(f, (8,9))\n\nFile /opt/anaconda3/envs/research_computing_scipy/lib/python3.9/site-packages/numpy/core/fromnumeric.py:285, in reshape(a, newshape, order)\n    200 @array_function_dispatch(_reshape_dispatcher)\n    201 def reshape(a, newshape, order='C'):\n    202 \"\"\"\n    203     Gives a new shape to an array without changing its data.\n    204 \n   (...)\n    283            [5, 6]])\n    284     \"\"\"\n--&gt; 285     return _wrapfunc(a, 'reshape', newshape, order=order)\n\nFile /opt/anaconda3/envs/research_computing_scipy/lib/python3.9/site-packages/numpy/core/fromnumeric.py:59, in _wrapfunc(obj, method, *args, **kwds)\n     56     return _wrapit(obj, method, *args, **kwds)\n     58 try:\n---&gt; 59     return bound(*args, **kwds)\n     60 except TypeError:\n     61     # A TypeError occurs if the object does have such a method in its\n     62     # class, but its signature is not identical to that of NumPy's. This\n   (...)\n     66     # Call _wrapit from within the except clause to ensure a potential\n     67     # exception has a traceback chain.\n     68     return _wrapit(obj, method, *args, **kwds)\n\nValueError: cannot reshape array of size 5000 into shape (8,9)</pre> In\u00a0[18]: Copied! <pre># reshape an array (right size) and mess it up\nprint(f.size)\ng = np.reshape(f, (200,25))\nplt.pcolormesh(g)\n</pre> # reshape an array (right size) and mess it up print(f.size) g = np.reshape(f, (200,25)) plt.pcolormesh(g) <pre>5000\n</pre> Out[18]: <pre>&lt;matplotlib.collections.QuadMesh at 0x1147de760&gt;</pre> In\u00a0[19]: Copied! <pre>f.shape\n</pre> f.shape Out[19]: <pre>(50, 100)</pre> In\u00a0[20]: Copied! <pre>np.tile(f,(6,1)).shape\n</pre> np.tile(f,(6,1)).shape Out[20]: <pre>(300, 100)</pre> In\u00a0[21]: Copied! <pre># tile an array\nplt.pcolormesh(np.tile(f,(6,1)))\n</pre> # tile an array plt.pcolormesh(np.tile(f,(6,1))) Out[21]: <pre>&lt;matplotlib.collections.QuadMesh at 0x114948a60&gt;</pre> In\u00a0[23]: Copied! <pre>from IPython.display import Image\nImage(url='http://scipy-lectures.github.io/_images/numpy_broadcasting.png',\n     width=720)\n</pre> from IPython.display import Image Image(url='http://scipy-lectures.github.io/_images/numpy_broadcasting.png',      width=720) Out[23]: In\u00a0[24]: Copied! <pre># multiply f by x\nprint(f.shape, x.shape)\ng = f * x\nprint(g.shape)\n</pre> # multiply f by x print(f.shape, x.shape) g = f * x print(g.shape) <pre>(50, 100) (100,)\n(50, 100)\n</pre> In\u00a0[25]: Copied! <pre># multiply f by y\nprint(f.shape, y.shape)\nh = f * y\nprint(h.shape)\n</pre> # multiply f by y print(f.shape, y.shape) h = f * y print(h.shape) <pre>(50, 100) (50,)\n</pre> <pre>\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[25], line 3\n      1 # multiply f by y\n      2 print(f.shape, y.shape)\n----&gt; 3 h = f * y\n      4 print(h.shape)\n\nValueError: operands could not be broadcast together with shapes (50,100) (50,) </pre> In\u00a0[26]: Copied! <pre># use newaxis special syntax\nh = f * y[:,np.newaxis]\nprint(h.shape)\n</pre> # use newaxis special syntax h = f * y[:,np.newaxis] print(h.shape) <pre>(50, 100)\n</pre> In\u00a0[27]: Copied! <pre># sum\ng.sum()\n</pre> # sum g.sum() Out[27]: <pre>-3083.038387807155</pre> In\u00a0[28]: Copied! <pre># mean\ng.mean()\n</pre> # mean g.mean() Out[28]: <pre>-0.616607677561431</pre> In\u00a0[29]: Copied! <pre># std\ng.std()\n</pre> # std g.std() Out[29]: <pre>1.6402280119141424</pre> In\u00a0[30]: Copied! <pre># apply on just one axis\n\n# Mean of each row (calculated across columns)\ng_xmean = g.mean(axis=1)\n\n# Mean of each column (calculated across rows)\n\ng_ymean = g.mean(axis=0)\n</pre> # apply on just one axis  # Mean of each row (calculated across columns) g_xmean = g.mean(axis=1)  # Mean of each column (calculated across rows)  g_ymean = g.mean(axis=0) In\u00a0[31]: Copied! <pre>plt.plot(x, g_ymean)\n</pre> plt.plot(x, g_ymean) Out[31]: <pre>[&lt;matplotlib.lines.Line2D at 0x114a38880&gt;]</pre> In\u00a0[32]: Copied! <pre>plt.plot(g_xmean, y)\n</pre> plt.plot(g_xmean, y) Out[32]: <pre>[&lt;matplotlib.lines.Line2D at 0x114a8e6a0&gt;]</pre> <p>Most real-world datasets \u2013 environmental or otherwise \u2013 have data gaps. Data can be missing for any number of reasons, including observations not being recorded or data corruption. While a cell corresponding to a data gap may just be left blank in a spreadsheet, when imported into Python, there must be some way to handle \"blank\" or missing values.</p> <p>Missing data should not be replaced with zeros, as 0 can be a valid value for many datasets, (e.g. temperature, precipitation, etc.). Instead, the convention is to fill all missing data with the constant NaN. NaN stands for \"Not a Number\" and is implemented in NumPy as np.nan.</p> <p>NaNs are handled differently by different packages. In NumPy, all computations involving NaN values will return nan:</p> In\u00a0[33]: Copied! <pre>data = np.array([[2.,2.7,1.89],\n                 [1.1, 0.0, np.nan],\n                 [3.2, 0.74, 2.1]])\n</pre> data = np.array([[2.,2.7,1.89],                  [1.1, 0.0, np.nan],                  [3.2, 0.74, 2.1]]) In\u00a0[34]: Copied! <pre>np.mean(data)\n</pre> np.mean(data) Out[34]: <pre>nan</pre> In\u00a0[35]: Copied! <pre>np.nanmean(data)\n</pre> np.nanmean(data) Out[35]: <pre>1.71625</pre> In\u00a0[36]: Copied! <pre>fig = plt.figure()\n</pre> fig = plt.figure() <pre>&lt;Figure size 640x480 with 0 Axes&gt;</pre> In\u00a0[37]: Copied! <pre>fig = plt.figure(figsize=(13, 5))\n</pre> fig = plt.figure(figsize=(13, 5)) <pre>&lt;Figure size 1300x500 with 0 Axes&gt;</pre> In\u00a0[38]: Copied! <pre>fig = plt.figure()\nax = fig.add_axes([0, 0, 1, 1])\n</pre> fig = plt.figure() ax = fig.add_axes([0, 0, 1, 1]) In\u00a0[39]: Copied! <pre>fig = plt.figure()\nax = fig.add_axes([0, 0, 0.5, 1])\n</pre> fig = plt.figure() ax = fig.add_axes([0, 0, 0.5, 1]) In\u00a0[40]: Copied! <pre>fig = plt.figure()\nax1 = fig.add_axes([0, 0, 0.5, 1])\nax2 = fig.add_axes([0.6, 0, 0.3, 0.5], facecolor='g')\n</pre> fig = plt.figure() ax1 = fig.add_axes([0, 0, 0.5, 1]) ax2 = fig.add_axes([0.6, 0, 0.3, 0.5], facecolor='g') In\u00a0[41]: Copied! <pre>fig = plt.figure()\naxes = fig.subplots(nrows=2, ncols=3)\n</pre> fig = plt.figure() axes = fig.subplots(nrows=2, ncols=3) In\u00a0[43]: Copied! <pre>fig = plt.figure(figsize=(12, 6))\naxes = fig.subplots(nrows=2, ncols=3)\n</pre> fig = plt.figure(figsize=(12, 6)) axes = fig.subplots(nrows=2, ncols=3) In\u00a0[44]: Copied! <pre>axes\n</pre> axes Out[44]: <pre>array([[&lt;Axes: &gt;, &lt;Axes: &gt;, &lt;Axes: &gt;],\n       [&lt;Axes: &gt;, &lt;Axes: &gt;, &lt;Axes: &gt;]], dtype=object)</pre> <p>There is a shorthand for doing this all at once.</p> <p>This is our recommended way to create new figures!</p> In\u00a0[45]: Copied! <pre>fig, ax = plt.subplots()\n</pre> fig, ax = plt.subplots() In\u00a0[46]: Copied! <pre>ax\n</pre> ax Out[46]: <pre>&lt;Axes: &gt;</pre> In\u00a0[47]: Copied! <pre>fig, axes = plt.subplots(ncols=2, figsize=(8, 4), subplot_kw={'facecolor': 'g'})\n</pre> fig, axes = plt.subplots(ncols=2, figsize=(8, 4), subplot_kw={'facecolor': 'g'}) In\u00a0[48]: Copied! <pre>axes\n</pre> axes Out[48]: <pre>array([&lt;Axes: &gt;, &lt;Axes: &gt;], dtype=object)</pre> In\u00a0[49]: Copied! <pre># create some data to plot\nimport numpy as np\nx = np.linspace(-np.pi, np.pi, 100)\ny = np.cos(x)\nz = np.sin(6*x)\n</pre> # create some data to plot import numpy as np x = np.linspace(-np.pi, np.pi, 100) y = np.cos(x) z = np.sin(6*x) In\u00a0[50]: Copied! <pre>fig, ax = plt.subplots()\nax.plot(x, y)\n</pre> fig, ax = plt.subplots() ax.plot(x, y) Out[50]: <pre>[&lt;matplotlib.lines.Line2D at 0x114ca27c0&gt;]</pre> <p>This does the same thing as</p> In\u00a0[51]: Copied! <pre>plt.plot(x, y)\n</pre> plt.plot(x, y) Out[51]: <pre>[&lt;matplotlib.lines.Line2D at 0x173539e80&gt;]</pre> <p>This starts to matter when we have multiple axes to worry about.</p> In\u00a0[52]: Copied! <pre>fig, axes = plt.subplots(figsize=(8, 4), ncols=2)\nax0, ax1 = axes\nax0.plot(x, y)\nax1.plot(x, z)\n</pre> fig, axes = plt.subplots(figsize=(8, 4), ncols=2) ax0, ax1 = axes ax0.plot(x, y) ax1.plot(x, z) Out[52]: <pre>[&lt;matplotlib.lines.Line2D at 0x1736068e0&gt;]</pre> In\u00a0[53]: Copied! <pre>fig, axes = plt.subplots(figsize=(8, 4), ncols=2)\nax0, ax1 = axes\n\nax0.plot(x, y)\nax0.set_xlabel('x')\nax0.set_ylabel('y')\nax0.set_title('x vs. y')\n\nax1.plot(x, z)\nax1.set_xlabel('x')\nax1.set_ylabel('z')\nax1.set_title('x vs. z')\n\n# squeeze everything in\nplt.tight_layout()\n</pre> fig, axes = plt.subplots(figsize=(8, 4), ncols=2) ax0, ax1 = axes  ax0.plot(x, y) ax0.set_xlabel('x') ax0.set_ylabel('y') ax0.set_title('x vs. y')  ax1.plot(x, z) ax1.set_xlabel('x') ax1.set_ylabel('z') ax1.set_title('x vs. z')  # squeeze everything in plt.tight_layout() In\u00a0[54]: Copied! <pre>fig, ax = plt.subplots()\nax.plot(x, y, x, z)\n</pre> fig, ax = plt.subplots() ax.plot(x, y, x, z) Out[54]: <pre>[&lt;matplotlib.lines.Line2D at 0x1737b42e0&gt;,\n &lt;matplotlib.lines.Line2D at 0x1737b4340&gt;]</pre> <p>It's simple to switch axes</p> In\u00a0[55]: Copied! <pre>fig, ax = plt.subplots()\nax.plot(y, x, z, x)\n</pre> fig, ax = plt.subplots() ax.plot(y, x, z, x) Out[55]: <pre>[&lt;matplotlib.lines.Line2D at 0x173839670&gt;,\n &lt;matplotlib.lines.Line2D at 0x1738396d0&gt;]</pre> In\u00a0[56]: Copied! <pre>fig, axes = plt.subplots(figsize=(16, 5), ncols=3)\naxes[0].plot(x, y, linestyle='dashed')\naxes[0].plot(x, z, linestyle='--')\n\naxes[1].plot(x, y, linestyle='dotted')\naxes[1].plot(x, z, linestyle=':')\n\naxes[2].plot(x, y, linestyle='dashdot', linewidth=5)\naxes[2].plot(x, z, linestyle='-.', linewidth=0.5)\n</pre> fig, axes = plt.subplots(figsize=(16, 5), ncols=3) axes[0].plot(x, y, linestyle='dashed') axes[0].plot(x, z, linestyle='--')  axes[1].plot(x, y, linestyle='dotted') axes[1].plot(x, z, linestyle=':')  axes[2].plot(x, y, linestyle='dashdot', linewidth=5) axes[2].plot(x, z, linestyle='-.', linewidth=0.5)  Out[56]: <pre>[&lt;matplotlib.lines.Line2D at 0x1739476d0&gt;]</pre> In\u00a0[57]: Copied! <pre>fig, ax = plt.subplots()\nax.plot(x, y, color='k')\nax.plot(x, z, color='r')\n</pre> fig, ax = plt.subplots() ax.plot(x, y, color='k') ax.plot(x, z, color='r') Out[57]: <pre>[&lt;matplotlib.lines.Line2D at 0x173a47850&gt;]</pre> <p>Other ways to specify colors:</p> In\u00a0[58]: Copied! <pre>fig, axes = plt.subplots(figsize=(16, 5), ncols=3)\n\n# grayscale\naxes[0].plot(x, y, color='0.8')\naxes[0].plot(x, z, color='0.2')\n\n# RGB tuple\naxes[1].plot(x, y, color=(1, 0, 0.7))\naxes[1].plot(x, z, color=(0, 0.4, 0.3))\n\n# HTML hex code\naxes[2].plot(x, y, color='#00dcba')\naxes[2].plot(x, z, color='#b029ee')\n</pre> fig, axes = plt.subplots(figsize=(16, 5), ncols=3)  # grayscale axes[0].plot(x, y, color='0.8') axes[0].plot(x, z, color='0.2')  # RGB tuple axes[1].plot(x, y, color=(1, 0, 0.7)) axes[1].plot(x, z, color=(0, 0.4, 0.3))  # HTML hex code axes[2].plot(x, y, color='#00dcba') axes[2].plot(x, z, color='#b029ee') Out[58]: <pre>[&lt;matplotlib.lines.Line2D at 0x173b536d0&gt;]</pre> <p>There is a default color cycle built into matplotlib.</p> In\u00a0[59]: Copied! <pre>plt.rcParams['axes.prop_cycle']\n</pre> plt.rcParams['axes.prop_cycle'] Out[59]: 'color''#1f77b4''#ff7f0e''#2ca02c''#d62728''#9467bd''#8c564b''#e377c2''#7f7f7f''#bcbd22''#17becf' In\u00a0[60]: Copied! <pre>fig, ax = plt.subplots(figsize=(12, 10))\nfor factor in np.linspace(0.2, 1, 11):\n    ax.plot(x, factor*y)\n</pre> fig, ax = plt.subplots(figsize=(12, 10)) for factor in np.linspace(0.2, 1, 11):     ax.plot(x, factor*y) In\u00a0[61]: Copied! <pre>fig, axes = plt.subplots(figsize=(12, 5), ncols=2)\n\naxes[0].plot(x[:20], y[:20], marker='.')\naxes[0].plot(x[:20], z[:20], marker='o')\n\naxes[1].plot(x[:20], z[:20], marker='^',\n             markersize=10, markerfacecolor='r',\n             markeredgecolor='k')\n</pre> fig, axes = plt.subplots(figsize=(12, 5), ncols=2)  axes[0].plot(x[:20], y[:20], marker='.') axes[0].plot(x[:20], z[:20], marker='o')  axes[1].plot(x[:20], z[:20], marker='^',              markersize=10, markerfacecolor='r',              markeredgecolor='k') Out[61]: <pre>[&lt;matplotlib.lines.Line2D at 0x114e7e310&gt;]</pre> In\u00a0[62]: Copied! <pre>fig, ax = plt.subplots(figsize=(12, 7))\nax.plot(x, y)\n\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_title(r'A complicated math function: $f(x) = \\cos(x)$')\n\nax.set_xticks(np.pi * np.array([-1, 0, 1]))\nax.set_xticklabels([r'$-\\pi$', '0', r'$\\pi$'])\nax.set_yticks([-1, 0, 1])\n\nax.set_yticks(np.arange(-1, 1.1, 0.2), minor=True)\n#ax.set_xticks(np.arange(-3, 3.1, 0.2), minor=True)\n\nax.grid(which='minor', linestyle='--')\nax.grid(which='major', linewidth=2)\n</pre> fig, ax = plt.subplots(figsize=(12, 7)) ax.plot(x, y)  ax.set_xlabel('x') ax.set_ylabel('y') ax.set_title(r'A complicated math function: $f(x) = \\cos(x)$')  ax.set_xticks(np.pi * np.array([-1, 0, 1])) ax.set_xticklabels([r'$-\\pi$', '0', r'$\\pi$']) ax.set_yticks([-1, 0, 1])  ax.set_yticks(np.arange(-1, 1.1, 0.2), minor=True) #ax.set_xticks(np.arange(-3, 3.1, 0.2), minor=True)  ax.grid(which='minor', linestyle='--') ax.grid(which='major', linewidth=2)  In\u00a0[63]: Copied! <pre>fig, ax = plt.subplots()\nax.plot(x, y, x, z)\nax.set_xlim(-5, 5)\nax.set_ylim(-3, 3)\n</pre> fig, ax = plt.subplots() ax.plot(x, y, x, z) ax.set_xlim(-5, 5) ax.set_ylim(-3, 3) Out[63]: <pre>(-3.0, 3.0)</pre> In\u00a0[64]: Copied! <pre>fig, ax = plt.subplots()\nax.plot(x, y, x, z)\nax.set_xlim(-5, 5)\nax.set_ylim(-100, 100)\n</pre> fig, ax = plt.subplots() ax.plot(x, y, x, z) ax.set_xlim(-5, 5) ax.set_ylim(-100, 100) Out[64]: <pre>(-100.0, 100.0)</pre> In\u00a0[65]: Copied! <pre>fig, ax = plt.subplots()\nax.plot(x, y)\nax.text(-3, 0.3, 'hello world')\nax.annotate('the maximum', xy=(0, 1),\n             xytext=(0, 0), arrowprops={'facecolor': 'k'})\n</pre> fig, ax = plt.subplots() ax.plot(x, y) ax.text(-3, 0.3, 'hello world') ax.annotate('the maximum', xy=(0, 1),              xytext=(0, 0), arrowprops={'facecolor': 'k'}) Out[65]: <pre>Text(0, 0, 'the maximum')</pre> In\u00a0[66]: Copied! <pre>fig, ax = plt.subplots()\n\nsplot = ax.scatter(y, z, c=x, s=(100*z**2 + 5))\nfig.colorbar(splot)\n</pre> fig, ax = plt.subplots()  splot = ax.scatter(y, z, c=x, s=(100*z**2 + 5)) fig.colorbar(splot) Out[66]: <pre>&lt;matplotlib.colorbar.Colorbar at 0x173e08af0&gt;</pre> In\u00a0[67]: Copied! <pre>labels = ['first', 'second', 'third']\nvalues = [10, 5, 30]\n\nfig, axes = plt.subplots(figsize=(10, 5), ncols=2)\naxes[0].bar(labels, values)\naxes[1].barh(labels, values)\n</pre> labels = ['first', 'second', 'third'] values = [10, 5, 30]  fig, axes = plt.subplots(figsize=(10, 5), ncols=2) axes[0].bar(labels, values) axes[1].barh(labels, values) Out[67]: <pre>&lt;BarContainer object of 3 artists&gt;</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[68]: Copied! <pre>x1d = np.linspace(-2*np.pi, 2*np.pi, 100)\ny1d = np.linspace(-np.pi, np.pi, 50)\nxx, yy = np.meshgrid(x1d, y1d)\nf = np.cos(xx) * np.sin(yy)\nprint(f.shape)\n</pre> x1d = np.linspace(-2*np.pi, 2*np.pi, 100) y1d = np.linspace(-np.pi, np.pi, 50) xx, yy = np.meshgrid(x1d, y1d) f = np.cos(xx) * np.sin(yy) print(f.shape) <pre>(50, 100)\n</pre> In\u00a0[69]: Copied! <pre>fig, ax = plt.subplots(figsize=(12,4), ncols=2)\nax[0].imshow(f)\nax[1].imshow(f, origin='lower')\n</pre> fig, ax = plt.subplots(figsize=(12,4), ncols=2) ax[0].imshow(f) ax[1].imshow(f, origin='lower') Out[69]: <pre>&lt;matplotlib.image.AxesImage at 0x173f64430&gt;</pre> In\u00a0[71]: Copied! <pre>fig, ax = plt.subplots(ncols=2, figsize=(12, 5))\npc0 = ax[0].pcolormesh(x1d, y1d, f)\npc1 = ax[1].pcolormesh(xx, yy, f)\nfig.colorbar(pc0, ax=ax[0])\nfig.colorbar(pc1, ax=ax[1])\n</pre> fig, ax = plt.subplots(ncols=2, figsize=(12, 5)) pc0 = ax[0].pcolormesh(x1d, y1d, f) pc1 = ax[1].pcolormesh(xx, yy, f) fig.colorbar(pc0, ax=ax[0]) fig.colorbar(pc1, ax=ax[1])  Out[71]: <pre>&lt;matplotlib.colorbar.Colorbar at 0x173e3e520&gt;</pre> In\u00a0[72]: Copied! <pre>x_sm, y_sm, f_sm = xx[:10, :10], yy[:10, :10], f[:10, :10]\n\nfig, ax = plt.subplots(figsize=(12,5), ncols=2)\n\n# last row and column ignored!\nax[0].pcolormesh(x_sm, y_sm, f_sm, edgecolors='k')\n\n# same!\nax[1].pcolormesh(x_sm, y_sm, f_sm[:-1, :-1], edgecolors='k')\n</pre> x_sm, y_sm, f_sm = xx[:10, :10], yy[:10, :10], f[:10, :10]  fig, ax = plt.subplots(figsize=(12,5), ncols=2)  # last row and column ignored! ax[0].pcolormesh(x_sm, y_sm, f_sm, edgecolors='k')  # same! ax[1].pcolormesh(x_sm, y_sm, f_sm[:-1, :-1], edgecolors='k')  Out[72]: <pre>&lt;matplotlib.collections.QuadMesh at 0x1733c78b0&gt;</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"Lecture_4_numpy_and_matplotlib/#lecture-4-numpy-and-matplotlib","title":"Lecture 4: Numpy and Matplotlib\u00b6","text":"<p>These are two of the most fundamental parts of the scientific python \"ecosystem\". Most everything else is built on top of them.</p>"},{"location":"Lecture_4_numpy_and_matplotlib/#to-install-matplotlib","title":"To install Matplotlib:\u00b6","text":"<p>Open a Terminal window, activate rcaes_env: </p> <p>conda activate rcaes_env  conda install -c conda-forge matplotlib </p>"},{"location":"Lecture_4_numpy_and_matplotlib/#numpy","title":"Numpy\u00b6","text":""},{"location":"Lecture_4_numpy_and_matplotlib/#ndarrays","title":"NDArrays\u00b6","text":"<p>The core class is the numpy ndarray (n-dimensional array). The n-dimensional array object in NumPy is referred to as an ndarray, a multidimensional container of homogeneous items \u2013 i.e. all values in the array are the same type and size. These arrays can be one-dimensional (one row or column vector), two-dimensional (m rows x n columns), or three-dimensional (arrays within arrays).</p>"},{"location":"Lecture_4_numpy_and_matplotlib/#create-array-from-a-list","title":"Create array from a list\u00b6","text":""},{"location":"Lecture_4_numpy_and_matplotlib/#create-arrays-using-functions","title":"Create arrays using functions\u00b6","text":"<p>There are lots of ways to create arrays.</p>"},{"location":"Lecture_4_numpy_and_matplotlib/#create-two-dimensional-grids","title":"Create two-dimensional grids\u00b6","text":""},{"location":"Lecture_4_numpy_and_matplotlib/#indexing","title":"Indexing\u00b6","text":"<p>Basic indexing is similar to lists</p>"},{"location":"Lecture_4_numpy_and_matplotlib/#array-operations","title":"Array Operations\u00b6","text":"<p>There are a huge number of operations available on arrays. All the familiar arithemtic operators are applied on an element-by-element basis.</p>"},{"location":"Lecture_4_numpy_and_matplotlib/#basic-math","title":"Basic Math\u00b6","text":""},{"location":"Lecture_4_numpy_and_matplotlib/#manipulating-array-dimensions","title":"Manipulating array dimensions\u00b6","text":""},{"location":"Lecture_4_numpy_and_matplotlib/#broadcasting","title":"Broadcasting\u00b6","text":"<p>Broadcasting is an efficient way to multiply arrays of different sizes</p>"},{"location":"Lecture_4_numpy_and_matplotlib/#reduction-operations","title":"Reduction Operations\u00b6","text":""},{"location":"Lecture_4_numpy_and_matplotlib/#missing-data","title":"Missing data\u00b6","text":""},{"location":"Lecture_4_numpy_and_matplotlib/#figure-and-axes","title":"Figure and Axes\u00b6","text":"<p>The figure is the highest level of organization of matplotlib objects. If we want, we can create a figure explicitly.</p>"},{"location":"Lecture_4_numpy_and_matplotlib/#subplots","title":"Subplots\u00b6","text":"<p>Subplot syntax is one way to specify the creation of multiple axes.</p>"},{"location":"Lecture_4_numpy_and_matplotlib/#drawing-into-axes","title":"Drawing into Axes\u00b6","text":"<p>All plots are drawn into axes. It is easiest to understand how matplotlib works if you use the object-oriented style.</p>"},{"location":"Lecture_4_numpy_and_matplotlib/#labeling-plots","title":"Labeling Plots\u00b6","text":""},{"location":"Lecture_4_numpy_and_matplotlib/#customizing-line-plots","title":"Customizing Line Plots\u00b6","text":""},{"location":"Lecture_4_numpy_and_matplotlib/#line-styles","title":"Line Styles\u00b6","text":""},{"location":"Lecture_4_numpy_and_matplotlib/#colors","title":"Colors\u00b6","text":"<p>As described in the colors documentation, there are some special codes for commonly used colors:</p> <ul> <li>b: blue</li> <li>g: green</li> <li>r: red</li> <li>c: cyan</li> <li>m: magenta</li> <li>y: yellow</li> <li>k: black</li> <li>w: white</li> </ul>"},{"location":"Lecture_4_numpy_and_matplotlib/#markers","title":"Markers\u00b6","text":"<p>There are lots of different markers availabile in matplotlib!</p>"},{"location":"Lecture_4_numpy_and_matplotlib/#label-ticks-and-gridlines","title":"Label, Ticks, and Gridlines\u00b6","text":""},{"location":"Lecture_4_numpy_and_matplotlib/#axis-limits","title":"Axis Limits\u00b6","text":""},{"location":"Lecture_4_numpy_and_matplotlib/#text-annotations","title":"Text Annotations\u00b6","text":""},{"location":"Lecture_4_numpy_and_matplotlib/#other-1d-plots","title":"Other 1D Plots\u00b6","text":""},{"location":"Lecture_4_numpy_and_matplotlib/#scatter-plots","title":"Scatter Plots\u00b6","text":""},{"location":"Lecture_4_numpy_and_matplotlib/#bar-plots","title":"Bar Plots\u00b6","text":""},{"location":"Lecture_4_numpy_and_matplotlib/#2d-plotting-methods","title":"2D Plotting Methods\u00b6","text":""},{"location":"Lecture_4_numpy_and_matplotlib/#imshow","title":"imshow\u00b6","text":""},{"location":"Lecture_4_numpy_and_matplotlib/#pcolormesh","title":"pcolormesh\u00b6","text":""},{"location":"Schedule/","title":"Schedule","text":""},{"location":"Schedule/#schedule","title":"Schedule","text":"date topic Assignment Sept 11 Course introduction Sept 18 Intro to Unix Shell, Python Environment, Core Python Language Amarel &amp; GitHub Account Sept 25 Intro to Git, Functions and Classes Assignment 1 due Oct 2 Basic Python: Numpy and Matplotlib Assignment 2 due Oct 9 Guest lecture: Introduction to Amarel Oct 16 Python for Tabular Data: Basic Pandas Assignment 3 due Oct 23 Python for Tabular Data: Numerical Analysis Assignment 4 Due Oct 30 Python for Multidimensional Data: Xarray Assignment 5 Due Nov 6 Making Maps: Cartopy Assignment 6 Due Nov 13 Environmental Sciences Packages: GeoPandas, Re-gridding tools Assignment 7 Due Nov 20 Reproducible Research: Python Packaging, Binder, OpenDAP Assignment 8 Due Nov 27 Big Data: Parallel Computing, Dask No Assignment Dec 4 Big Data: Cloud Computing Final Project Part I Due Dec 11 No Class Final Project Part II Due"},{"location":"Syllabus/","title":"Syllabus","text":""},{"location":"Syllabus/#part-1-course-information","title":"Part 1: Course Information","text":"<p>Class Time: Monday, 2 to 5 PM  Location: ENR 323</p>"},{"location":"Syllabus/#instructor","title":"Instructor:","text":"<p>Xiaomeng Jin Department of Environmental Sciences Office: ENR 230 Email: xiaomeng.jin@rutgers.edu Office Hour: Friday, 1 \u2013 2 PM</p>"},{"location":"Syllabus/#part-2-overview","title":"Part 2: Overview","text":"<p>This course will introduce modern computing software, programming tools and best practices for open-source research that are transparent, accessible, reproducible and inclusive. The course consists of three components:   (1) Introduction to programming in the open-source Python language and in-depth exploration of the numerical analysis and visualization packages that comprise the modern scientific Python ecosystem;  (2) Introduction to the concept of open science and best practices for conducting open-source research;   (3) Introduction to cloud and parallel computing for big data analysis. The course is designed to be accessible for graduate students in atmospheric science, environmental sciences or other disciplines in earth sciences.  Student learning will be facilitated through a combination of lectures, in-class exercises, homework assignments and class projects.</p>"},{"location":"Syllabus/#part-3-course-structure","title":"Part 3: Course Structure","text":"<p>Format: The instructor will present new materials in the first half of the lecture. The second half of the class will be flipped: students will work first in small groups and then individually on assignments.  Textbook: There is no required textbook. All materials will come from free online resources and the course website itself.  Computers: Students can either bring their laptops or use the computers in ENR 323. Students will use Amarel, the university\u2019s high performance computing cluster, to work on their assignments and final project.  </p>"},{"location":"Syllabus/#part-4-grading-policy","title":"Part 4: Grading Policy","text":""},{"location":"Syllabus/#weekly-assignments-70","title":"Weekly Assignments (70%)","text":"<p>\u2022   Total: 100 \u2022   All questions complete: 50 \u2022   All questions correct: 30  \u2022   Clean, elegant, efficient code: rate between 0 and 10  \u2022   Clear comments and explanations: rate between 0 and 10  \u2022   Late penalty: -20 per day (24 hrs) \u2022   Lowest grade on an assignment will be dropped. </p>"},{"location":"Syllabus/#final-project-30","title":"Final Project (30%)","text":"<p> Part I: Individual Project (20%)  The goal of the final project is to assess your ability to combine and apply the skills you have learned in class in the context of a real-world research problem. Our class has mostly focused on tools for data analysis and visualization, so this must be the focus of your final project. Specifically, we seek to assess your ability to do the following tasks:  \u2022   Discover and download real datasets in standard formats (e.g. CSV, netCDF)  \u2022   Load the data into pandas or xarray, performing any necessary data cleanup (dealing with missing values, proper time encoding, etc.) along the way.  \u2022   Perform realistic scientific calculation involving, for example tasks such as grouping, aggregating, and applying mathematical formulas.  \u2022   Visualize your results in well-formatted plots. </p> <p> Part II: Reproducing Another Student\u2019s Project (10%)   The goal of the second part is to assess the reproducibility of the student\u2019s project, and whether the students can reproduce and collaborate with others on code development. Our class focuses on conducting open-source research that are transparent, accessible, reproducible and inclusive, so your final project should demonstrate your understanding and ability to perform open-source research. We seek to assess your ability to:  \u2022   Clearly document your analysis to make it reproducible.  \u2022   Reproduce the other student\u2019s final project.  \u2022   Bonus points will be given if the students submit pull requests and issues for code development. </p>"},{"location":"assignment_1/","title":"Assignment 1 Introduction to Python","text":"<p>Now we will begin the process of reading the file with python</p> In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! <p>It should be a familiar type we learned about in class.</p> In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! <p>By now you have figured out what is in this data. Let's now transform it into a more useful format.</p> In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied!"},{"location":"assignment_1/#assignment-1-introduction-to-python","title":"Assignment 1 Introduction to Python\u00b6","text":""},{"location":"assignment_1/#preparation","title":"Preparation:\u00b6","text":"<ol> <li>Open the assignment link on Canvas.</li> <li>Accept the assignment and link it with your name.</li> <li>A repository will be created under your name.</li> </ol> <p>Use Amarel to launch a Shell terminal and use the terminal to do the following tasks:</p> <ol> <li>Create a new directory called <code>rcaes</code> within your home directory</li> <li>Go to 'rcaes' directory.</li> <li>GitHub Authentication: gh auth login</li> </ol> <ul> <li>What account do you want to log into? GitHub.com</li> <li>What is your preferred protocol for Git operations? SSH</li> <li>Generate a new SSH key to add to your GitHub account? Yes</li> <li>Enter a passphrase for your new SSH key (Optional) *********</li> <li>Title for your SSH key: GitHub CLI</li> <li>How would you like to authenticate GitHub CLI? Login with a web browser</li> <li>First copy your one-time code: XXXXXX</li> <li>Press Enter to open github.com in your browser... Enter</li> </ul> <ol> <li>In the browser, enter the one-time code.</li> <li>Go back to your GitHub repository.</li> <li>Clone your GitHub repository: 'Code' -&gt; 'GitHub CLI' -&gt; 'gh repo clone rcaes2023/assignment_1-YOURGHNAME'</li> </ol>"},{"location":"assignment_1/#python-lists-and-loops","title":"Python Lists and Loops\u00b6","text":"<p>In this problem, we will explore the basic data structures and flow controls of python by manually parsing a CSV file.</p> <p>Note that this is a futile exercise. In the \"real world\" you should never manually parse a CSV file. There are utilities out there that will do it for you much more quickly and efficiently. However, it is a useful exercise for learning python.</p> <p>Before starting the python part, use the JupyterLab file browser to browse to this file. Click to open it. What do you see?</p>"},{"location":"assignment_1/#open-the-file-using-the-open-function","title":"Open the file using the <code>open</code> function\u00b6","text":"<p>Specifically, run the command</p> <pre><code>file = open('rcaes_roster.csv')</code></pre>"},{"location":"assignment_1/#use-the-help-function-to-get-the-documentation-for-your-new-variable-file","title":"Use the <code>help</code> function to get the documentation for your new variable <code>file</code>\u00b6","text":"<p>This will produce a long list of methods you can use with <code>file</code>.</p>"},{"location":"assignment_1/#read-the-lines-of-the-file-into-a-variable-called-lines","title":"Read the lines of the file into a variable called <code>lines</code>\u00b6","text":"<p>Hint: use the documentation above to find the method that sounds most likely to do what you want.</p>"},{"location":"assignment_1/#display-lines-at-the-end-of-a-cell-in-order-to-see-its-contents","title":"Display <code>lines</code> at the end of a cell in order to see its contents\u00b6","text":""},{"location":"assignment_1/#display-the-number-of-students-in-class","title":"Display the number of students in class\u00b6","text":""},{"location":"assignment_1/#use-slicing-to-display-the-first-three-items-of-the-list-and-the-last-3","title":"Use slicing to display the first three items of the list. And the last 3\u00b6","text":""},{"location":"assignment_1/#now-iterate-through-lines-and-print-the-item-if-it-contains-your-netid","title":"Now iterate through <code>lines</code> and <code>print</code> the item if it contains your NetID\u00b6","text":""},{"location":"assignment_1/#write-code-to-transform-the-data-into-a-dictionary-whose-keys-are-netids-and-whose-values-are-full-names","title":"Write code to transform the data into a dictionary whose keys are NetIDs and whose values are full names.\u00b6","text":"<p>(Hint: You might need to review Python's string methods. You can start with creating an empty dictionary and adding keys/values in a loop.)</p>"},{"location":"assignment_1/#use-this-dictionary-to-look-up-your-own-name-using-your-netid","title":"Use this dictionary to look up your own name using your NetID\u00b6","text":""},{"location":"assignment_1/#figure-out-who-has-the-longest-last-name-in-the-class-bonus-10","title":"Figure out who has the longest last name in the class (Bonus: 10)\u00b6","text":"<p>(Hint: First create a list of last names.)</p>"},{"location":"assignment_1/#assignment-submission","title":"Assignment submission:\u00b6","text":"<p>When you're done with your assignment, submit your assignment using git:</p> <pre><code>git add *\ngit commit -m 'first commit' (or any other message)\ngit push</code></pre>"},{"location":"assignment_2/","title":"Assignment 2: Python Functions and Classes","text":"In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied!"},{"location":"assignment_2/#assignment-2-python-functions-and-classes","title":"Assignment 2: Python Functions and Classes\u00b6","text":""},{"location":"assignment_2/#part-i-writing-functions","title":"Part I: Writing Functions\u00b6","text":""},{"location":"assignment_2/#1-write-a-function-to-convert-temperature-from-kelvin-to-celsius-and-another-function-to-covert-from-celsius-to-kelvin","title":"1. Write a function to convert temperature from kelvin to celsius, and another function to covert from celsius to kelvin\u00b6","text":""},{"location":"assignment_2/#2-write-a-function-to-convert-temperature-to-fahrenheit","title":"2. Write a function to convert temperature to fahrenheit\u00b6","text":"<p>Include an optional keyword argument to specify whether the input is in  celcius or kelvin. Call your previously defined functions if necessary.</p>"},{"location":"assignment_2/#3-check-that-the-outputs-are-sensible","title":"3. Check that the outputs are sensible\u00b6","text":"<p>by trying a few examples</p>"},{"location":"assignment_2/#4-now-write-a-function-that-converts-from-farenheit","title":"4. Now write a function that converts from farenheit\u00b6","text":"<p>and uses a keyword argument to specify whether you want the output in celcius or kelvin</p>"},{"location":"assignment_2/#5-write-a-function-that-takes-two-arguments-feet-and-inches-and-returns-height-in-meters","title":"5. Write a function that takes two arguments (feet and inches) and returns height in meters\u00b6","text":"<p>Verify it gives sensible answers</p>"},{"location":"assignment_2/#6-write-a-function-takes-one-argument-height-in-meters-and-returns-two-arguments-feet-and-inches","title":"6. Write a function takes one argument (height in meters) and returns two arguments (feet and inches)\u00b6","text":"<p>(Consult the tutorial on numbers if you are stuck on how to implement this.)</p>"},{"location":"assignment_2/#7-verify-that-the-round-trip-conversion-from-and-back-to-meters-is-consistent","title":"7. Verify that the \"round trip\" conversion from and back to meters is consistent\u00b6","text":"<p>Check for 3 different values of height in meters</p>"},{"location":"assignment_2/#part-iv-classes","title":"Part IV: Classes\u00b6","text":"<p>Write a class that represents a Location. The constructor class should accept the arguments <code>name</code>, <code>latitude</code>, and <code>longitude</code>.</p> <p>Check if the latitude is between -90 to 90, and the longitude is between -180 and 180. Raise ValueError if not.</p> <p>You should implement a method to calculate its relative location to our ENR building:</p> <ul> <li><code>relative_loc_from_ENR</code>: The lat/lon of ENR buidling is: 40.476\u02daN, 74.43\u02daW. Print out if the location is 1) to the north or south or ENR; (2)to the east or west of ENR.</li> </ul>"},{"location":"intro_to_python/","title":"Core Python Language","text":"In\u00a0[1]: Copied! <pre># comments are anything that comes after the \"#\" symbol\na = 1       # assign 1 to variable a\nb = \"hello\" # assign \"hello\" to variable b\n</pre> # comments are anything that comes after the \"#\" symbol a = 1       # assign 1 to variable a b = \"hello\" # assign \"hello\" to variable b <p>The following identifiers are used as reserved words, or keywords of the language, and cannot be used as ordinary identifiers. They must be spelled exactly as written here:</p> <pre><code>False      class      finally    is         return\nNone       continue   for        lambda     try\nTrue       def        from       nonlocal   while\nand        del        global     not        with\nas         elif       if         or         yield\nassert     else       import     pass\nbreak      except     in         raise</code></pre> <p>Additionally, the following a built in functions which are always available in your namespace once you open a python interpreter</p> <pre><code>abs() dict() help() min() setattr() all() dir() hex() next() slice() any()\ndivmod() id() object() sorted() ascii() enumerate() input() oct() staticmethod()\nbin() eval() int() open() str() bool() exec() isinstance() ord() sum() bytearray()\nfilter() issubclass() pow() super() bytes() float() iter() print() tuple()\ncallable() format() len() property() type() chr() frozenset() list() range()\nvars() classmethod() getattr() locals() repr() zip() compile() globals() map()\nreversed() __import__() complex() hasattr() max() round() delattr() hash()\nmemoryview() set()</code></pre> In\u00a0[2]: Copied! <pre># how to we see our variables?\nprint(a)\nprint(b)\nprint(a,b)\n</pre> # how to we see our variables? print(a) print(b) print(a,b) <pre>1\nhello\n1 hello\n</pre> <p>All variables are objects. Every object has a type (class). To find out what type your variables are</p> In\u00a0[3]: Copied! <pre>print(type(a))\nprint(type(b))\n</pre> print(type(a)) print(type(b)) <pre>&lt;class 'int'&gt;\n&lt;class 'str'&gt;\n</pre> In\u00a0[4]: Copied! <pre># as a shortcut, iPython notebooks will automatically print whatever is on the last line\ntype(b)\n</pre> # as a shortcut, iPython notebooks will automatically print whatever is on the last line type(b) Out[4]: <pre>str</pre> In\u00a0[5]: Copied! <pre># we can check for the type of an object\nprint(type(a) is int)\nprint(type(a) is str)\n</pre> # we can check for the type of an object print(type(a) is int) print(type(a) is str) <pre>True\nFalse\n</pre> <p>Different objects attributes and methods, which can be accessed via the syntax <code>variable.method</code></p> <p>IPython will autocomplete if you press <code>&lt;tab&gt;</code> to show you the methods available.</p> In\u00a0[6]: Copied! <pre># this returns the method itself\nb.capitalize\n</pre> # this returns the method itself b.capitalize Out[6]: <pre>&lt;function str.capitalize()&gt;</pre> In\u00a0[7]: Copied! <pre># this calls the method\nb.capitalize()\n# there are lots of other methods\n</pre> # this calls the method b.capitalize() # there are lots of other methods Out[7]: <pre>'Hello'</pre> In\u00a0[8]: Copied! <pre># binary operations act differently on different types of objects\nc = 'World'\nprint(b + c)\nprint(a + 2)\nprint(a + b)\n</pre> # binary operations act differently on different types of objects c = 'World' print(b + c) print(a + 2) print(a + b) <pre>helloWorld\n3\n</pre> <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[8], line 5\n      3 print(b + c)\n      4 print(a + 2)\n----&gt; 5 print(a + b)\n\nTypeError: unsupported operand type(s) for +: 'int' and 'str'</pre> In\u00a0[9]: Copied! <pre># addition / subtraction\n1+1-5\n</pre> # addition / subtraction 1+1-5 Out[9]: <pre>-3</pre> In\u00a0[10]: Copied! <pre># multiplication\n5 * 10\n</pre> # multiplication 5 * 10 Out[10]: <pre>50</pre> In\u00a0[11]: Copied! <pre># division\n1/2\n</pre> # division 1/2 Out[11]: <pre>0.5</pre> In\u00a0[12]: Copied! <pre># that was automatically converted to a float\ntype(1/2)\n</pre> # that was automatically converted to a float type(1/2) Out[12]: <pre>float</pre> In\u00a0[13]: Copied! <pre># exponentiation\n2**4\n</pre> # exponentiation 2**4 Out[13]: <pre>16</pre> In\u00a0[14]: Copied! <pre># rounding\nround(9/10)\n</pre> # rounding round(9/10) Out[14]: <pre>1</pre> In\u00a0[15]: Copied! <pre># built in complex number support\n(1+2j) / (3-4j)\n</pre> # built in complex number support (1+2j) / (3-4j) Out[15]: <pre>(-0.2+0.4j)</pre> In\u00a0[16]: Copied! <pre># logic\nTrue and True\n</pre> # logic True and True Out[16]: <pre>True</pre> In\u00a0[17]: Copied! <pre>True and False\n</pre> True and False Out[17]: <pre>False</pre> In\u00a0[18]: Copied! <pre>True or True\n</pre> True or True Out[18]: <pre>True</pre> In\u00a0[19]: Copied! <pre>(not True) or (not False)\n</pre> (not True) or (not False) Out[19]: <pre>True</pre> In\u00a0[20]: Copied! <pre>x = 100\nif x &gt; 0:\n    print('Positive Number')\nelif x &lt; 0:\n    print('Negative Number')\nelse:\n    print ('Zero!')\n</pre> x = 100 if x &gt; 0:     print('Positive Number') elif x &lt; 0:     print('Negative Number') else:     print ('Zero!') <pre>Positive Number\n</pre> In\u00a0[21]: Copied! <pre># indentation is MANDATORY\n# blocks are closed by indentation level\nif x &gt; 0:\n    print('Positive Number')\n    if x &gt;= 100:\n        print('Huge number!')\n</pre> # indentation is MANDATORY # blocks are closed by indentation level if x &gt; 0:     print('Positive Number')     if x &gt;= 100:         print('Huge number!') <pre>Positive Number\nHuge number!\n</pre> In\u00a0[22]: Copied! <pre># make a loop \ncount = 0\nwhile count &lt; 10:\n    # bad way\n    # count = count + 1\n    # better way\n    count += 1\nprint(count)\n</pre> # make a loop  count = 0 while count &lt; 10:     # bad way     # count = count + 1     # better way     count += 1 print(count) <pre>10\n</pre> In\u00a0[23]: Copied! <pre># use range\nfor i in range(5):\n    print(i)\n</pre> # use range for i in range(5):     print(i) <pre>0\n1\n2\n3\n4\n</pre> <p>Important point: in python, we always count from 0!</p> In\u00a0[24]: Copied! <pre># what is range?\ntype(range)\n</pre> # what is range? type(range) Out[24]: <pre>type</pre> In\u00a0[25]: Copied! <pre>range?\n</pre> range? <pre>Init signature: range(self, /, *args, **kwargs)\nDocstring:     \nrange(stop) -&gt; range object\nrange(start, stop[, step]) -&gt; range object\n\nReturn an object that produces a sequence of integers from start (inclusive)\nto stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.\nstart defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.\nThese are exactly the valid indices for a list of 4 elements.\nWhen step is given, it specifies the increment (or decrement).\nType:           type\nSubclasses:     </pre> In\u00a0[26]: Copied! <pre># iterate over a list we make up\nfor pet in ['dog', 'cat', 'fish']:\n    print(pet, len(pet))\n</pre> # iterate over a list we make up for pet in ['dog', 'cat', 'fish']:     print(pet, len(pet)) <pre>dog 3\ncat 3\nfish 4\n</pre> <p>What is the thing in brackets? A list! Lists are one of the core python data structures.</p> In\u00a0[27]: Copied! <pre>l = ['dog', 'cat', 'fish']\ntype(l)\n</pre> l = ['dog', 'cat', 'fish'] type(l) Out[27]: <pre>list</pre> In\u00a0[28]: Copied! <pre># list have lots of methods\nl.sort()\nl\n</pre> # list have lots of methods l.sort() l Out[28]: <pre>['cat', 'dog', 'fish']</pre> In\u00a0[29]: Copied! <pre># we can convert a range to a list\nr = list(range(5))\nr\n</pre> # we can convert a range to a list r = list(range(5)) r Out[29]: <pre>[0, 1, 2, 3, 4]</pre> In\u00a0[30]: Copied! <pre>while r:\n    p = r.pop()\n    print('p:', p)\n    print('r:', r)\n</pre> while r:     p = r.pop()     print('p:', p)     print('r:', r) <pre>p: 4\nr: [0, 1, 2, 3]\np: 3\nr: [0, 1, 2]\np: 2\nr: [0, 1]\np: 1\nr: [0]\np: 0\nr: []\n</pre> <p>There are many different ways to interact with lists. Exploring them is part of the fun of python.</p> <p>list.append(x) Add an item to the end of the list. Equivalent to a[len(a):] = [x].</p> <p>list.extend(L) Extend the list by appending all the items in the given list. Equivalent to a[len(a):] = L.</p> <p>list.insert(i, x) Insert an item at a given position. The first argument is the index of the element before which to insert, so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x).</p> <p>list.remove(x) Remove the first item from the list whose value is x. It is an error if there is no such item.</p> <p>list.pop([i]) Remove the item at the given position in the list, and return it. If no index is specified, a.pop() removes and returns the last item in the list. (The square brackets around the i in the method signature denote that the parameter is optional, not that you should type square brackets at that position. You will see this notation frequently in the Python Library Reference.)</p> <p>list.clear() Remove all items from the list. Equivalent to del a[:].</p> <p>list.index(x) Return the index in the list of the first item whose value is x. It is an error if there is no such item.</p> <p>list.count(x) Return the number of times x appears in the list.</p> <p>list.sort() Sort the items of the list in place.</p> <p>list.reverse() Reverse the elements of the list in place.</p> <p>list.copy() Return a shallow copy of the list. Equivalent to a[:].</p> <p>Don't assume you know how list operations work!</p> In\u00a0[31]: Copied! <pre># \"add\" two lists\nx = list(range(5))\ny = list(range(10,15))\nz = x + y\nz\n</pre> # \"add\" two lists x = list(range(5)) y = list(range(10,15)) z = x + y z Out[31]: <pre>[0, 1, 2, 3, 4, 10, 11, 12, 13, 14]</pre> In\u00a0[32]: Copied! <pre># access items from a list\nprint('first', z[0])\nprint('last', z[-1])\nprint('first 3', z[:3])\nprint('last 3', z[-3:])\nprint('middle, skipping every other item', z[5:10:2])\n</pre> # access items from a list print('first', z[0]) print('last', z[-1]) print('first 3', z[:3]) print('last 3', z[-3:]) print('middle, skipping every other item', z[5:10:2]) <pre>first 0\nlast 14\nfirst 3 [0, 1, 2]\nlast 3 [12, 13, 14]\nmiddle, skipping every other item [10, 12, 14]\n</pre> <p>MEMORIZE THIS SYNTAX! It is central to so much of python and often proves confusing for users coming from other languages.</p> <p>In terms of set notation, python indexing is left inclusive, right exclusive. If you remember this, you will never go wrong.</p> In\u00a0[33]: Copied! <pre># that means we get an error from the following\nN = len(z)\nz[N]\n</pre> # that means we get an error from the following N = len(z) z[N] <pre>\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[33], line 3\n      1 # that means we get an error from the following\n      2 N = len(z)\n----&gt; 3 z[N]\n\nIndexError: list index out of range</pre> In\u00a0[37]: Copied! <pre># this index notation also applies to strings\nname = 'Xiaomeng Jin'\nprint(name[:4])\n</pre> # this index notation also applies to strings name = 'Xiaomeng Jin' print(name[:4]) <pre>Xiao\n</pre> In\u00a0[38]: Copied! <pre>print(name[:-4])\n</pre> print(name[:-4]) <pre>Xiaomeng\n</pre> In\u00a0[39]: Copied! <pre>print(name[-4:])\n</pre> print(name[-4:]) <pre> Jin\n</pre> In\u00a0[40]: Copied! <pre># you can also test for the presence of items in a list\n5 in z\n</pre> # you can also test for the presence of items in a list 5 in z Out[40]: <pre>False</pre> <p>Lists are not meant for math! They don't have a datatype.</p> In\u00a0[41]: Copied! <pre>z[4] = 'fish'\nz\n</pre> z[4] = 'fish' z Out[41]: <pre>[0, 1, 2, 3, 'fish', 10, 11, 12, 13, 14]</pre> <p>Python is full of tricks for iterating and working with lists</p> In\u00a0[42]: Copied! <pre># a cool python trick: list comprehension\nsquares = [n**2 for n in range(5)]\nsquares\n</pre> # a cool python trick: list comprehension squares = [n**2 for n in range(5)] squares Out[42]: <pre>[0, 1, 4, 9, 16]</pre> In\u00a0[43]: Copied! <pre># iterate over two lists together uzing zip\nfor item1, item2 in zip(x,y):\n    print('first:', item1, 'second:', item2)\n</pre> # iterate over two lists together uzing zip for item1, item2 in zip(x,y):     print('first:', item1, 'second:', item2) <pre>first: 0 second: 10\nfirst: 1 second: 11\nfirst: 2 second: 12\nfirst: 3 second: 13\nfirst: 4 second: 14\n</pre> In\u00a0[48]: Copied! <pre># tuples are created with parentheses, or just commas\na = ('Jin', 32, True)\nb = 'Wang', 25, False\ntype(b)\n</pre> # tuples are created with parentheses, or just commas a = ('Jin', 32, True) b = 'Wang', 25, False type(b) Out[48]: <pre>tuple</pre> In\u00a0[50]: Copied! <pre># can be indexed like arrays\nprint(a[1]) # not the first element!\n</pre> # can be indexed like arrays print(a[1]) # not the first element! <pre>32\n</pre> In\u00a0[51]: Copied! <pre># and they can be unpacked\nname, age, status = a\n</pre> # and they can be unpacked name, age, status = a In\u00a0[52]: Copied! <pre># different ways to create dictionaries\nd = {'name': 'Jin', 'age': 32}\ne = dict(name='Wang', age=25)\ne\n</pre> # different ways to create dictionaries d = {'name': 'Jin', 'age': 32} e = dict(name='Wang', age=25) e Out[52]: <pre>{'name': 'Wang', 'age': 25}</pre> In\u00a0[53]: Copied! <pre># access a value\nd['name']\n</pre> # access a value d['name'] Out[53]: <pre>'Jin'</pre> <p>Square brackets <code>[...]</code> are python for \"get item\" in many different contexts.</p> In\u00a0[54]: Copied! <pre># test for the presence of a key\nprint('age' in d)\nprint('height' in e)\n</pre> # test for the presence of a key print('age' in d) print('height' in e) <pre>True\nFalse\n</pre> In\u00a0[55]: Copied! <pre># try to access a non-existant key\nd['height']\n</pre> # try to access a non-existant key d['height'] <pre>\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nCell In[55], line 2\n      1 # try to access a non-existant key\n----&gt; 2 d['height']\n\nKeyError: 'height'</pre> In\u00a0[56]: Copied! <pre># add a new key\nd['height'] = (5,3) # a tuple\nd\n</pre> # add a new key d['height'] = (5,3) # a tuple d Out[56]: <pre>{'name': 'Jin', 'age': 32, 'height': (5, 3)}</pre> In\u00a0[60]: Copied! <pre># keys don't have to be strings\nd[99] = 'nighty nine'\nd\n</pre> # keys don't have to be strings d[99] = 'nighty nine' d Out[60]: <pre>{'name': 'Jin', 'age': 32, 'height': (5, 3), 99: 'nighty nine'}</pre> In\u00a0[61]: Copied! <pre># iterate over keys\nfor k in d:\n    print(k, d[k])\n</pre> # iterate over keys for k in d:     print(k, d[k]) <pre>name Jin\nage 32\nheight (5, 3)\n99 nighty nine\n</pre> In\u00a0[62]: Copied! <pre># better way\n### python 2\n### for key, val in d.iteritems()\nfor key, val in d.items():\n    print(key, val)\n</pre> # better way ### python 2 ### for key, val in d.iteritems() for key, val in d.items():     print(key, val) <pre>name Jin\nage 32\nheight (5, 3)\n99 nighty nine\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"intro_to_python/#core-python-language","title":"Core Python Language\u00b6","text":"<p>Mostly copied from the official python tutorial</p>"},{"location":"intro_to_python/#invoking-python","title":"Invoking Python\u00b6","text":"<p>There are three main ways to use python.</p> <ol> <li>By running a python file, e.g. <code>python myscript.py</code></li> <li>Through an interactive console (python interpreter or ipython shell)</li> <li>In an interactive iPython notebook</li> </ol> <p>We will be using the iPython notebook.</p>"},{"location":"intro_to_python/#python-versions","title":"Python Versions\u00b6","text":"<p>There are two versions of the python language out there: python 2 and python 3. Python 2 is more common in the wild but is depracated. The community is moving to python 3. As new python learners, you should learn python 3. But it is important to be aware that python 2 exists. It is possible that a package you want to use is only supported in python 2. In general, it is pretty easy to switch between then.</p> <p>Some of the main changes in python 3 are:</p> <ul> <li><code>print</code> is a function</li> <li>Integer division returns a float</li> <li>Iterators behave differently</li> <li>Unicode is used for encoding code</li> </ul>"},{"location":"intro_to_python/#basic-variables-numbers-and-string","title":"Basic Variables: Numbers and String\u00b6","text":""},{"location":"intro_to_python/#math","title":"Math\u00b6","text":"<p>Basic arithmetic and boolean logic is part of the core python library.</p>"},{"location":"intro_to_python/#conditionals","title":"Conditionals\u00b6","text":"<p>The first step to programming. Plus an intro to python syntax.</p>"},{"location":"intro_to_python/#more-flow-control","title":"More Flow Control\u00b6","text":""},{"location":"intro_to_python/#lists","title":"Lists\u00b6","text":""},{"location":"intro_to_python/#other-data-structures","title":"Other Data Structures\u00b6","text":"<p>We are almost there. We have the building blocks we need to do basic programming. But python has some other data structures we need to learn about.</p>"},{"location":"intro_to_python/#tuples","title":"Tuples\u00b6","text":"<p>Tuples are similar to lists, but they are immutable\u2014they can't be extended or modified. What is the point of this? Generally speaking: to pack together inhomogeneous data. Tuples can then be unpacked and distributed by other parts of your code.</p> <p>Tuples may seem confusing at first, but with time you will come to appreciate them.</p>"},{"location":"intro_to_python/#dictionaries","title":"Dictionaries\u00b6","text":"<p>This is an extremely useful data structure. It maps keys to values.</p> <p>Dictionaries are unordered!</p>"},{"location":"lecture_1_intro/","title":"Lecture 1 Introduction","text":""},{"location":"lecture_1_intro/#presentation-slides-are-posted-on-canvas","title":"Presentation slides are posted on Canvas","text":""},{"location":"lecture_1_intro/#key-points","title":"Key Points","text":"<ol> <li>What is computational research?</li> <li>Data analysis pipeline for computational research. </li> <li>Challenges in research computing: Complexity, Reproducibility, Data Size. </li> <li>Topics we will cover in class.  </li> <li>Class logistics. </li> </ol>"},{"location":"lecture_1_intro/#topics-we-will-cover-in-class","title":"Topics we will cover in class","text":"<ol> <li>Python Programming</li> <li>Open-source Computing</li> <li>Big Data</li> </ol>"},{"location":"lecture_1_intro/#learning-goals","title":"Learning Goals","text":"<ol> <li>Be able to construct complete, well-structured programs in Python.</li> <li>Read and write most common atmospheric and environmental sciences data formats.</li> <li>Perform basic exploratory data analysis.</li> <li>Use visualization to enhance interpretation of environmental science data, including making maps and interactive visualizations.</li> <li>Practice open-source research through version control, packaging etc.</li> <li>Practice big-data analysis with parallel computing.</li> <li>Understand the concepts of cloud computing. </li> </ol>"}]}